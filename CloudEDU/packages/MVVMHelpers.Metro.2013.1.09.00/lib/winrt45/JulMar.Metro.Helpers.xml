<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JulMar.Metro.Helpers</name>
    </assembly>
    <members>
        <member name="T:JulMar.Windows.Behaviors.BindableCommand">
            <summary>
            This class can be used to create a bound ICommand in resources based on the 
            active DataContext and then used in other namescopes such as an inner DataTemplate
            </summary>
        </member>
        <member name="F:JulMar.Windows.Behaviors.BindableCommand.CommandProperty">
            <summary>
            ICommand implementation to bind to the input type.
            </summary>
        </member>
        <member name="F:JulMar.Windows.Behaviors.BindableCommand.CommandParameterProperty">
            <summary>
            Parameter for the ICommand
            </summary>
        </member>
        <member name="M:JulMar.Windows.Behaviors.BindableCommand.CanExecute(System.Object)">
            <summary>
            Returns whether the command is valid
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:JulMar.Windows.Behaviors.BindableCommand.Execute(System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="P:JulMar.Windows.Behaviors.BindableCommand.Command">
            <summary>
            Gets and sets the Command
            </summary>
        </member>
        <member name="P:JulMar.Windows.Behaviors.BindableCommand.CommandParameter">
            <summary>
            Gets and sets the CommandParameter
            </summary>
        </member>
        <member name="E:JulMar.Windows.Behaviors.BindableCommand.CanExecuteChanged">
            <summary>
            This is used to determine if the command validity has changed.
            </summary>
        </member>
        <member name="T:JulMar.Windows.Behaviors.EventCommander">
            <summary>
            This class manages a collection of command to event mappings.  It is used to wire up View events to a
            ViewModel ICommand implementation. 
            </summary>
            <example>
            <![CDATA[
            
            <Behaviors:EventCommander.Mappings>
               <Behaviors:CommandEvent Command="{Binding PointerEnterCommand}" Event="PointerEnter" />
               <Behaviors:CommandEvent Command="{Binding PointerLeaveCommand}" Event="PointerLeave" />
            </Behaviors:EventCommander.Mappings>
            
            ]]>
            </example>
        </member>
        <member name="F:JulMar.Windows.Behaviors.EventCommander.MappingsProperty">
            <summary>
            Mappings backing store
            </summary>
        </member>
        <member name="M:JulMar.Windows.Behaviors.EventCommander.GetMappings(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Retrieves the mapping collection
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:JulMar.Windows.Behaviors.EventCommander.SetMappings(Windows.UI.Xaml.DependencyObject,JulMar.Windows.Behaviors.CommandEventCollection)">
            <summary>
            This sets the mapping collection.
            </summary>
            <param name="obj">Dependency Object</param>
            <param name="value">Mapping collection</param>
        </member>
        <member name="M:JulMar.Windows.Behaviors.EventCommander.OnMappingsChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            This changes the event mapping
            </summary>
            <param name="target"></param>
            <param name="e"></param>
        </member>
        <member name="T:JulMar.Windows.Behaviors.EventParameters">
            <summary>
            This is passed to the ICommand handler for the event
            </summary>
        </member>
        <member name="M:JulMar.Windows.Behaviors.EventParameters.#ctor(System.Windows.Input.ICommand,System.Object,System.Object,System.Object)">
            <summary>
            Constructor for the EventParameters
            </summary>
            <param name="command">ICommand</param>
            <param name="sender">Event sender</param>
            <param name="e">Event args</param>
            <param name="parameter">CommandParameter</param>
        </member>
        <member name="P:JulMar.Windows.Behaviors.EventParameters.Sender">
            <summary>
            The sender of the handled event
            </summary>
        </member>
        <member name="P:JulMar.Windows.Behaviors.EventParameters.EventArgs">
            <summary>
            The passed EventArgs for the event.
            </summary>
        </member>
        <member name="P:JulMar.Windows.Behaviors.EventParameters.Command">
            <summary>
            The ICommand which has just been executed
            </summary>
        </member>
        <member name="P:JulMar.Windows.Behaviors.EventParameters.CommandParameter">
            <summary>
            The associated CommandParameter (if any).
            </summary>
        </member>
        <member name="T:JulMar.Windows.Behaviors.CommandEvent">
            <summary>
            This represents a single event to command mapping. 
            </summary>
        </member>
        <member name="F:JulMar.Windows.Behaviors.CommandEvent.CommandProperty">
            <summary>
            Command Property Dependency Property
            </summary>
        </member>
        <member name="F:JulMar.Windows.Behaviors.CommandEvent.CommandParameterProperty">
            <summary>
            Parameter for the ICommand
            </summary>
        </member>
        <member name="F:JulMar.Windows.Behaviors.CommandEvent.EventProperty">
            <summary>
            Event Dependency Property
            </summary>
        </member>
        <member name="M:JulMar.Windows.Behaviors.CommandEvent.Subscribe(System.Object)">
            <summary>
            Wires up an event to the target
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:JulMar.Windows.Behaviors.CommandEvent.LookForEventDeclaration(System.Object,System.String)">
            <summary>
            This searches the type for a given event - including ancestor classes.
            </summary>
            <param name="target"></param>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="M:JulMar.Windows.Behaviors.CommandEvent.Unsubscribe(System.Object)">
            <summary>
            Unwires target event
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:JulMar.Windows.Behaviors.CommandEvent.GetEventMethod(System.Reflection.EventInfo)">
            <summary>
            Retrieves a delegate to our OnEventRaised method which may be used with a specific
            EventHandler subtype based on an EventInfo.
            </summary>
            <param name="ei">Event to generate</param>
            <returns></returns>
        </member>
        <member name="M:JulMar.Windows.Behaviors.CommandEvent.OnEventRaised(System.Object,System.Object)">
            <summary>
            This is invoked by the event - it invokes the command.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:JulMar.Windows.Behaviors.CommandEvent.Event">
            <summary>
            Gets or sets the Event property.
            </summary>
        </member>
        <member name="P:JulMar.Windows.Behaviors.CommandEvent.Command">
            <summary>
            Gets or sets the Command property. 
            </summary>
        </member>
        <member name="P:JulMar.Windows.Behaviors.CommandEvent.CommandParameter">
            <summary>
            Gets or sets the CommandParameter property.
            </summary>
        </member>
        <member name="T:JulMar.Windows.Behaviors.CommandEventCollection">
            <summary>
            Collection of command to event mappings
            </summary>
        </member>
        <member name="M:JulMar.Windows.Behaviors.CommandEventCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Windows.Behaviors.CommandEventCollection.Subscribe(System.Object)">
            <summary>
            Wire up events to the target
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:JulMar.Windows.Behaviors.CommandEventCollection.Unsubscribe(System.Object)">
            <summary>
            Unwire all target events
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:JulMar.Windows.Behaviors.CommandEventCollection.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This handles the collection change event - it then subscribes and unsubscribes events.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Windows.Behaviors.CommandEventCollection.OnItemAdded(JulMar.Windows.Behaviors.CommandEvent)">
            <summary>
            A new item has been added to the event list
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:JulMar.Windows.Behaviors.CommandEventCollection.OnItemRemoved(JulMar.Windows.Behaviors.CommandEvent)">
            <summary>
            An item has been removed from the event list.
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:JulMar.Windows.Behaviors.FocusScope">
            <summary>
            Focus Scope class which allows you to set focus initially to a Control
            </summary>
        </member>
        <member name="F:JulMar.Windows.Behaviors.FocusScope.InitialFocusProperty">
            <summary>
            Focus property - set this on a UI element to change focus when loaded.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Behaviors.FocusScope.GetInitialFocus(Windows.UI.Xaml.Controls.Control)">
            <summary>
            Get the initial focus property from a Control
            </summary>
            <param name="theControl">Control</param>
            <returns>Current setting</returns>
        </member>
        <member name="M:JulMar.Windows.Behaviors.FocusScope.SetInitialFocus(Windows.UI.Xaml.Controls.Control,System.Boolean)">
            <summary>
            Set the initial focus property onto a control.
            </summary>
            <param name="theControl">Control</param>
            <param name="value">New value</param>
        </member>
        <member name="M:JulMar.Windows.Behaviors.FocusScope.OnSetFocusChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the focus state property changes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Windows.Behaviors.FocusScope.TrySetFocus(Windows.UI.Xaml.Controls.Control)">
            <summary>
            This attempts to programmatically set focus to the given control
            </summary>
            <param name="theControl">Control to set focus to</param>
        </member>
        <member name="M:JulMar.Windows.Behaviors.FocusScope.TheControlOnLoaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            This is called when the associated control is loaded.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:JulMar.Windows.Behaviors.NameScopeBinding">
            <summary>
            This class allows ElementName bindings to be carried into attached properties
            and behaviors by placing a reference to them into a resource collection
            </summary>
            <example>
            <![CDATA[
            <Page.Resources>
               <NameScopeBinding Source="{Binding ElementName=theList}" />
            </Page.Resources>
            <ListBox x:Name=theList>
               <interactivity:Interaction.Triggers>
                  <interactivity:EventTrigger EventName="SelectionChanged">
                     <julmar:InvokeCommand Command="{Binding SelectCommand}" CommandParameter="{Binding Source.SelectedItem, Source={StaticResource theList}}" />
                  </interactivity:EventTrigger>
               <interactivity:Interaction.Triggers>
            </ListBox>
            ]]>
            </example>
        </member>
        <member name="F:JulMar.Windows.Behaviors.NameScopeBinding.SourceProperty">
            <summary>
            Backing storage for Element property
            </summary>
        </member>
        <member name="P:JulMar.Windows.Behaviors.NameScopeBinding.Source">
            <summary>
            Source to bind to and make available as a resource
            </summary>
        </member>
        <member name="T:JulMar.Windows.Behaviors.StyleSetter">
            <summary>
            Class to help bind setters in a Style as Metro doesn't support it in V1. This class may be removed once the support is added to
            the binding engine.
            </summary>
            <notes>
            This class was adapted from the Silverlight version written by David Anson
            http://blogs.msdn.com/b/delay/archive/2009/11/02/as-the-platform-evolves-so-do-the-workarounds-better-settervaluebindinghelper-makes-silverlight-setters-better-er.aspx
            </notes>
            <example>
            <![CDATA[
            
            <Style TargetType="ListBoxItem">
               <Setter Property="julmar:StyleSetter.PropertyBindings">
                  <Setter.Value>
                     <SetterValueBinding Type="Canvas" Property="Left" Binding="{Binding X}" />
                     <SetterValueBinding Type="Canvas" Property="Top" Binding="{Binding Y}" />
                  </Setter.Value>
               </Setter>
            </Style>
            ]]>
            </example>
        </member>
        <member name="F:JulMar.Windows.Behaviors.StyleSetter.PropertyBindingsProperty">
            <summary>
            PropertyBinding attached DependencyProperty.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Behaviors.StyleSetter.GetPropertyBindings(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the value of the PropertyBinding attached DependencyProperty.
            </summary>
            <param name="element">Element for which to get the property.</param>
            <returns>Value of PropertyBinding attached DependencyProperty.</returns>
        </member>
        <member name="M:JulMar.Windows.Behaviors.StyleSetter.SetPropertyBindings(Windows.UI.Xaml.FrameworkElement,JulMar.Windows.Behaviors.StyleSetter)">
            <summary>
            Sets the value of the PropertyBinding attached DependencyProperty.
            </summary>
            <param name="element">Element on which to set the property.</param>
            <param name="value">Value forPropertyBinding attached DependencyProperty.</param>
        </member>
        <member name="M:JulMar.Windows.Behaviors.StyleSetter.OnPropertyBindingPropertyChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Change handler for the PropertyBinding attached DependencyProperty.
            </summary>
            <param name="dpo">Object on which the property was changed.</param>
            <param name="e">Property change arguments.</param>
        </member>
        <member name="M:JulMar.Windows.Behaviors.StyleSetter.ApplyBinding(Windows.UI.Xaml.FrameworkElement,JulMar.Windows.Behaviors.SetterValueBinding)">
            <summary>
            Applies the Binding represented by the SetterValueBindingHelper.
            </summary>
            <param name="element">Element to apply the Binding to.</param>
            <param name="item">SetterValueBindingHelper representing the Binding.</param>
        </member>
        <member name="P:JulMar.Windows.Behaviors.StyleSetter.Values">
            <summary>
            Collection of SetterValueBindingHelper instances to apply to the
            target element.
            </summary>
            <remarks>
            Used when multiple Bindings need to be applied to the same element.
            </remarks>
        </member>
        <member name="P:JulMar.Windows.Behaviors.StyleSetter.AssembliesToSearch">
            <summary>
            Returns a stream of assemblies to search for the provided type name.
            </summary>
        </member>
        <member name="T:JulMar.Windows.Behaviors.SetterValueBinding">
            <summary>
            A binding value to apply to a Style setter
            </summary>
        </member>
        <member name="P:JulMar.Windows.Behaviors.SetterValueBinding.Type">
            <summary>
            Optional type parameter used to specify the type of an attached
            DependencyProperty as an assembly-qualified name, full name, or
            short name.
            </summary>
        </member>
        <member name="P:JulMar.Windows.Behaviors.SetterValueBinding.Property">
            <summary>
            Property name for the normal/attached DependencyProperty on which
            to set the Binding.
            </summary>
        </member>
        <member name="P:JulMar.Windows.Behaviors.SetterValueBinding.Binding">
            <summary>
            Binding to set on the specified property.
            </summary>
        </member>
        <member name="T:JulMar.Core.Collections.CollectionSubset`1">
            <summary>
            A collection subset for grouping
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JulMar.Core.Collections.CollectionSubset`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="baseCollection">Collection to wrap</param>
            <param name="maxCount">Count to display</param>
        </member>
        <member name="M:JulMar.Core.Collections.CollectionSubset`1.ItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This tracks the next MaxCount items in the base collection and shows them in this collection.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:JulMar.Core.Collections.CollectionSubset`1.MaxCount">
            <summary>
            Maximum count to display
            </summary>
        </member>
        <member name="T:JulMar.Core.Collections.ObservableDictionary`2">
            <summary>
             This is a Dictionary that supports INotifyCollectionChanged semantics. 
            </summary>
             <remarks>
             WARNING: this dictionary is NOT thread-safe!  You must still
             provide synchronization to ensure no writes are done while the dictionary is being
             enumerated!  This should not be a problem for most bindings as they rely on the 
             CollectionChanged information.
             </remarks>
            <typeparam name="TKey">Key</typeparam>
            <typeparam name="TValue">Value type</typeparam>
        </member>
        <member name="M:JulMar.Core.Collections.ObservableDictionary`2.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Core.Collections.ObservableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Constructor that allows different storage initialization
            </summary>
        </member>
        <member name="M:JulMar.Core.Collections.ObservableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor that takes an equality comparer
            </summary>
            <param name="comparer">Comparison class</param>
        </member>
        <member name="M:JulMar.Core.Collections.ObservableDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.
            </param><param name="value">The object to use as the value of the element to add.
            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception><exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:JulMar.Core.Collections.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:JulMar.Core.Collections.ObservableDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. 
            </exception>
        </member>
        <member name="M:JulMar.Core.Collections.ObservableDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:JulMar.Core.Collections.ObservableDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
        </member>
        <member name="M:JulMar.Core.Collections.ObservableDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:JulMar.Core.Collections.ObservableDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.
            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:JulMar.Core.Collections.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:JulMar.Core.Collections.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param>
        </member>
        <member name="M:JulMar.Core.Collections.ObservableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JulMar.Core.Collections.ObservableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key whose value to get.
            </param><param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.
            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:JulMar.Core.Collections.ObservableDictionary`2.OnNotifyAdd(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            This is used to notify insertions into the dictionary.
            </summary>
            <param name="item">Item</param>
        </member>
        <member name="M:JulMar.Core.Collections.ObservableDictionary`2.OnNotifyRemove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            This is used to notify removals from the dictionary
            </summary>
            <param name="item">Item</param>
        </member>
        <member name="M:JulMar.Core.Collections.ObservableDictionary`2.OnNotifyReplace(System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            This is used to notify replacements in the dictionary
            </summary>
            <param name="newItem">New item</param>
            <param name="oldItem">Old item</param>
        </member>
        <member name="M:JulMar.Core.Collections.ObservableDictionary`2.OnNotifyReset">
            <summary>
            This is used to notify that the dictionary was completely reset.
            </summary>
        </member>
        <member name="M:JulMar.Core.Collections.ObservableDictionary`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/> event with the provided arguments.
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="E:JulMar.Core.Collections.ObservableDictionary`2.CollectionChanged">
            <summary>
            Event raised for collection change notification
            </summary>
        </member>
        <member name="P:JulMar.Core.Collections.ObservableDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:JulMar.Core.Collections.ObservableDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:JulMar.Core.Collections.ObservableDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set.
            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception><exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key"/> is not found.
            </exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="P:JulMar.Core.Collections.ObservableDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:JulMar.Core.Collections.ObservableDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="T:JulMar.Core.Collections.WeakReferenceList`1">
            <summary>
            A List(Of T) that implements weak reference semantics.
            Elements in the list can be collected if no other reference exists to the object.
            The list automatically cleans up when any item is added or removed.
            </summary>
            <remarks>
            Do not use this for List(String) - strings are interned and treated differently by the
            CLR.  As such they will never be "dead" and so this class will act just like a normal
            List - so just use List.
            </remarks>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="M:JulMar.Core.Collections.WeakReferenceList`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:JulMar.Core.Collections.WeakReferenceList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor which takes an existing list
            </summary>
            <param name="existingData">Existing data to load</param>
        </member>
        <member name="M:JulMar.Core.Collections.WeakReferenceList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:JulMar.Core.Collections.WeakReferenceList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items to the list.
            </summary>
            <param name="existingData">Existing data to load</param>
        </member>
        <member name="M:JulMar.Core.Collections.WeakReferenceList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:JulMar.Core.Collections.WeakReferenceList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:JulMar.Core.Collections.WeakReferenceList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
        </member>
        <member name="M:JulMar.Core.Collections.WeakReferenceList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:JulMar.Core.Collections.WeakReferenceList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="M:JulMar.Core.Collections.WeakReferenceList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param><param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:JulMar.Core.Collections.WeakReferenceList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:JulMar.Core.Collections.WeakReferenceList`1.ToList">
            <summary>
            Converts to a List with strong references to all active items
            </summary>
            <returns>List of items</returns>
        </member>
        <member name="M:JulMar.Core.Collections.WeakReferenceList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:JulMar.Core.Collections.WeakReferenceList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JulMar.Core.Collections.WeakReferenceList`1.DoEnumeration">
            <summary>
            Private method to run enumeration
            </summary>
            <returns></returns>
        </member>
        <member name="M:JulMar.Core.Collections.WeakReferenceList`1.RemoveDeadItems">
            <summary>
            This method removes all items which have been collected.
            </summary>
        </member>
        <member name="M:JulMar.Core.Collections.WeakReferenceList`1.GetItem(System.Int32,`0@)">
            <summary>
            This retrieves a specific item by index.
            </summary>
            <param name="index">Index to retrieve</param>
            <param name="value">Returning value, null if item was collected</param>
            <returns>True if item was present at index</returns>
        </member>
        <member name="P:JulMar.Core.Collections.WeakReferenceList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:JulMar.Core.Collections.WeakReferenceList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:JulMar.Core.Collections.WeakReferenceList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="T:JulMar.Core.Concurrency.ObjectLockExtensions">
            <summary>
            This class provides a functional way to obtain a monitor and
            invoke an action.  This allows for an elegant syntax to Monitor.TryEnter.
            </summary>
            <example>
            <![CDATA[
              object myLock = new object();
              ...
              myLock.UsingLock(() => DoSomeThreadSafeWorkHere());
              myLock.TryUsingLock(TimeSpan.FromSeconds(10), () => CalculateValues());
            ]]>
            </example>
        </member>
        <member name="M:JulMar.Core.Concurrency.ObjectLockExtensions.UsingLock(System.Object,System.Action)">
            <summary>
            Performs an action while holding a Monitor; infinite wait
            </summary>
            <param name="monitor">Object to lock</param>
            <param name="action">Action to invoke</param>
        </member>
        <member name="M:JulMar.Core.Concurrency.ObjectLockExtensions.UsingLock``1(System.Object,System.Func{``0})">
            <summary>
            Performs an action while holding a Monitor; infinite wait
            </summary>
            <typeparam name="T">Result type</typeparam>
            <param name="monitor">Object to lock</param>
            <param name="action">Action to invoke</param>
            <returns>Result from action</returns>
        </member>
        <member name="M:JulMar.Core.Concurrency.ObjectLockExtensions.TryUsingLock(System.Object,System.Int32,System.Action)">
            <summary>
            Attempts to obtain monitor and performs action.
            </summary>
            <param name="monitor">Object to lock</param>
            <param name="timeout">Timeout</param>
            <param name="action">Action to invoke</param>
            <returns>True if action invoked</returns>
        </member>
        <member name="M:JulMar.Core.Concurrency.ObjectLockExtensions.TryUsingLock(System.Object,System.TimeSpan,System.Action)">
            <summary>
            Attempts to obtain monitor and performs action.
            </summary>
            <param name="monitor">Object to lock</param>
            <param name="timeSpan">Timeout</param>
            <param name="action">Action to invoke</param>
            <returns>True if action invoked</returns>
        </member>
        <member name="M:JulMar.Core.Concurrency.ObjectLockExtensions.TryUsingLock``1(System.Object,System.Int32,System.Func{``0},``0@)">
            <summary>
            Attempts to obtain monitor and performs action that returns result.
            </summary>
            <typeparam name="T">Result type</typeparam>
            <param name="monitor">Object to lock</param>
            <param name="timeout">Timeout to wait</param>
            <param name="action">Action to perform</param>
            <param name="result">Result from action</param>
            <returns>True if action invoked</returns>
        </member>
        <member name="M:JulMar.Core.Concurrency.ObjectLockExtensions.TryUsingLock``1(System.Object,System.TimeSpan,System.Func{``0},``0@)">
            <summary>
            Attempts to obtain monitor and performs action that returns result.
            </summary>
            <typeparam name="T">Result type</typeparam>
            <param name="monitor">Object to lock</param>
            <param name="timeSpan">Timeout to wait</param>
            <param name="action">Action to perform</param>
            <param name="result">Result from action</param>
            <returns>True if action invoked</returns>
        </member>
        <member name="T:JulMar.Core.Concurrency.ReaderWriterLockSlimExtensions">
            <summary>
            A set of extensions applied over ReaderWriterLockSlim to ensure the
            lock is properly released through the use of delegates/anonymous methods.
            </summary>
        </member>
        <member name="M:JulMar.Core.Concurrency.ReaderWriterLockSlimExtensions.UsingReadLock(System.Threading.ReaderWriterLockSlim,System.Action)">
            <summary>
            Used to perform some action while holding the ReaderWriterLock read-lock
            </summary>
            <param name="rwl">Reader/Writer Lock</param>
            <param name="action">Action to perform</param>
        </member>
        <member name="M:JulMar.Core.Concurrency.ReaderWriterLockSlimExtensions.TryUsingReadLock(System.Threading.ReaderWriterLockSlim,System.Int32,System.Action)">
            <summary>
            Used to perform some action while holding the ReaderWriterLock read-lock
            </summary>
            <param name="rwl">Reader/Writer Lock</param>
            <param name="timeout">Timeout</param>
            <param name="action">Action to perform</param>
        </member>
        <member name="M:JulMar.Core.Concurrency.ReaderWriterLockSlimExtensions.TryUsingReadLock(System.Threading.ReaderWriterLockSlim,System.TimeSpan,System.Action)">
            <summary>
            Used to perform some action while holding the ReaderWriterLock read-lock
            </summary>
            <param name="rwl">Reader/Writer Lock</param>
            <param name="timeSpan">Timeout</param>
            <param name="action">Action to perform</param>
        </member>
        <member name="M:JulMar.Core.Concurrency.ReaderWriterLockSlimExtensions.UsingReadLock``1(System.Threading.ReaderWriterLockSlim,System.Func{``0})">
            <summary>
            Used to perform some action while holding the ReaderWriterLock read-lock
            </summary>
            <param name="rwl">Reader/Writer Lock</param>
            <param name="action">Action to perform</param>
        </member>
        <member name="M:JulMar.Core.Concurrency.ReaderWriterLockSlimExtensions.TryUsingReadLock``1(System.Threading.ReaderWriterLockSlim,System.Int32,System.Func{``0},``0@)">
            <summary>
            Used to perform some action while holding the ReaderWriterLock read-lock
            </summary>
            <param name="rwl">Reader/Writer Lock</param>
            <param name="timeout">Timeout</param>
            <param name="action">Action to perform</param>
            <param name="result">Result</param>
        </member>
        <member name="M:JulMar.Core.Concurrency.ReaderWriterLockSlimExtensions.TryUsingReadLock``1(System.Threading.ReaderWriterLockSlim,System.TimeSpan,System.Func{``0},``0@)">
            <summary>
            Used to perform some action while holding the ReaderWriterLock read-lock
            </summary>
            <param name="rwl">Reader/Writer Lock</param>
            <param name="timeSpan">Timeout</param>
            <param name="action">Action to perform</param>
            <param name="result">Result</param>
        </member>
        <member name="M:JulMar.Core.Concurrency.ReaderWriterLockSlimExtensions.UsingUpgradeableReadLock(System.Threading.ReaderWriterLockSlim,System.Action)">
            <summary>
            Used to perform some action while holding the ReaderWriterLock upgradeable read-lock
            </summary>
            <param name="rwl">Reader/Writer Lock</param>
            <param name="action">Action to perform</param>
        </member>
        <member name="M:JulMar.Core.Concurrency.ReaderWriterLockSlimExtensions.TryUsingUpgradeableReadLock(System.Threading.ReaderWriterLockSlim,System.Int32,System.Action)">
            <summary>
            Used to perform some action while holding the ReaderWriterLock upgradeable read-lock
            </summary>
            <param name="rwl">Reader/Writer Lock</param>
            <param name="timeout">Timeout</param>
            <param name="action">Action to perform</param>
        </member>
        <member name="M:JulMar.Core.Concurrency.ReaderWriterLockSlimExtensions.TryUsingUpgradeableReadLock(System.Threading.ReaderWriterLockSlim,System.TimeSpan,System.Action)">
            <summary>
            Used to perform some action while holding the ReaderWriterLock upgradeable read-lock
            </summary>
            <param name="rwl">Reader/Writer Lock</param>
            <param name="timeSpan">Timeout</param>
            <param name="action">Action to perform</param>
        </member>
        <member name="M:JulMar.Core.Concurrency.ReaderWriterLockSlimExtensions.UsingUpgradeableReadLock``1(System.Threading.ReaderWriterLockSlim,System.Func{``0})">
            <summary>
            Used to perform some action while holding the ReaderWriterLock upgradeable read-lock
            </summary>
            <param name="rwl">Reader/Writer Lock</param>
            <param name="action">Action to perform</param>
        </member>
        <member name="M:JulMar.Core.Concurrency.ReaderWriterLockSlimExtensions.TryUsingUpgradeableReadLock``1(System.Threading.ReaderWriterLockSlim,System.Int32,System.Func{``0},``0@)">
            <summary>
            Used to perform some action while holding the ReaderWriterLock upgradable read-lock
            </summary>
            <param name="rwl">Reader/Writer Lock</param>
            <param name="timeout">Timeout</param>
            <param name="action">Action to perform</param>
            <param name="result">Result</param>
        </member>
        <member name="M:JulMar.Core.Concurrency.ReaderWriterLockSlimExtensions.TryUsingUpgradeableReadLock``1(System.Threading.ReaderWriterLockSlim,System.TimeSpan,System.Func{``0},``0@)">
            <summary>
            Used to perform some action while holding the ReaderWriterLock upgradable read-lock
            </summary>
            <param name="rwl">Reader/Writer Lock</param>
            <param name="timeSpan">Timeout</param>
            <param name="action">Action to perform</param>
            <param name="result">Result</param>
        </member>
        <member name="M:JulMar.Core.Concurrency.ReaderWriterLockSlimExtensions.UsingWriteLock(System.Threading.ReaderWriterLockSlim,System.Action)">
            <summary>
            Used to perform some action while holding the ReaderWriterLock write-lock
            </summary>
            <param name="rwl">Reader/Writer Lock</param>
            <param name="action">Action to perform</param>
        </member>
        <member name="M:JulMar.Core.Concurrency.ReaderWriterLockSlimExtensions.TryUsingWriteLock(System.Threading.ReaderWriterLockSlim,System.Int32,System.Action)">
            <summary>
            Used to perform some action while holding the ReaderWriterLock write-lock
            </summary>
            <param name="rwl">Reader/Writer Lock</param>
            <param name="timeout">Timeout</param>
            <param name="action">Action to perform</param>
        </member>
        <member name="M:JulMar.Core.Concurrency.ReaderWriterLockSlimExtensions.TryUsingWriteLock(System.Threading.ReaderWriterLockSlim,System.TimeSpan,System.Action)">
            <summary>
            Used to perform some action while holding the ReaderWriterLock write-lock
            </summary>
            <param name="rwl">Reader/Writer Lock</param>
            <param name="timeSpan">Timeout</param>
            <param name="action">Action to perform</param>
        </member>
        <member name="M:JulMar.Core.Concurrency.ReaderWriterLockSlimExtensions.UsingWriteLock``1(System.Threading.ReaderWriterLockSlim,System.Func{``0})">
            <summary>
            Used to perform some action while holding the ReaderWriterLock write-lock
            </summary>
            <param name="rwl">Reader/Writer Lock</param>
            <param name="action">Action to perform</param>
        </member>
        <member name="M:JulMar.Core.Concurrency.ReaderWriterLockSlimExtensions.TryUsingWriteLock``1(System.Threading.ReaderWriterLockSlim,System.Int32,System.Func{``0},``0@)">
            <summary>
            Used to perform some action while holding the ReaderWriterLock write-lock
            </summary>
            <param name="rwl">Reader/Writer Lock</param>
            <param name="timeout">Timeout</param>
            <param name="action">Action to perform</param>
            <param name="result">Result</param>
        </member>
        <member name="M:JulMar.Core.Concurrency.ReaderWriterLockSlimExtensions.TryUsingWriteLock``1(System.Threading.ReaderWriterLockSlim,System.TimeSpan,System.Func{``0},``0@)">
            <summary>
            Used to perform some action while holding the ReaderWriterLock write-lock
            </summary>
            <param name="rwl">Reader/Writer Lock</param>
            <param name="timeSpan">Timeout</param>
            <param name="action">Action to perform</param>
            <param name="result">Result</param>
        </member>
        <member name="T:JulMar.Windows.Controls.FlyoutPage">
            <summary>
            A single FlyoutPage class which supports creating "flyout" panels with an animation.
            To use this, derive a new Page class and fill with details.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Controls.FlyoutPage.Show">
            <summary>
            Method used to show the flyout
            </summary>
        </member>
        <member name="M:JulMar.Windows.Controls.FlyoutPage.Close">
            <summary>
            Method to close the flyout
            </summary>
        </member>
        <member name="M:JulMar.Windows.Controls.FlyoutPage.OnPopupOpened(System.Object,System.Object)">
            <summary>
            This is called when the popup is opened.  We raise an event
            for external processes to catch.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Windows.Controls.FlyoutPage.OnWindowActivated(System.Object,Windows.UI.Core.WindowActivatedEventArgs)">
            <summary>
            Monitor the Window.Activated event to close the popup
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Windows.Controls.FlyoutPage.OnPopupClosed(System.Object,System.Object)">
            <summary>
            Called when the popup is closed. Perform all cleanup.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:JulMar.Windows.Controls.FlyoutPage.FlyoutOpened">
            <summary>
            Event raised when the flyout is opened
            </summary>
        </member>
        <member name="E:JulMar.Windows.Controls.FlyoutPage.FlyoutClosed">
            <summary>
            Event raised when the flyout is closed
            </summary>
        </member>
        <member name="T:JulMar.Windows.Converters.ArrayToStringConverter">
            <summary>
            This converts an array of objects to a string with a given separator.  The default
            separator is a comma, but it can be changed through a property.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Converters.ArrayToStringConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Windows.Converters.ArrayToStringConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Windows.Converters.ArrayToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="P:JulMar.Windows.Converters.ArrayToStringConverter.Separator">
            <summary>
            Separator to use when joining strings
            </summary>
        </member>
        <member name="T:JulMar.Windows.Converters.BooleanToBrushConverter">
            <summary>
            This converts a Boolean value to a Brush
            </summary>
        </member>
        <member name="M:JulMar.Windows.Converters.BooleanToBrushConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Windows.Converters.BooleanToBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="P:JulMar.Windows.Converters.BooleanToBrushConverter.TrueBrush">
            <summary>
            Mapping for True value
            </summary>
        </member>
        <member name="P:JulMar.Windows.Converters.BooleanToBrushConverter.FalseBrush">
            <summary>
            Mapping for False value
            </summary>
        </member>
        <member name="T:JulMar.Windows.Converters.BooleanToVisibilityConverter">
            <summary>
            This converts a Boolean to a Visibility.  It supports mapping the conversions.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Converters.BooleanToVisibilityConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Windows.Converters.BooleanToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Windows.Converters.BooleanToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="P:JulMar.Windows.Converters.BooleanToVisibilityConverter.TrueTreatment">
            <summary>
            Mapping for True to Visibility.  Defaults to Visible.
            </summary>
        </member>
        <member name="P:JulMar.Windows.Converters.BooleanToVisibilityConverter.FalseTreatment">
            <summary>
            Mapping for False to Visibility.  Defaults to Collapsed.
            </summary>
        </member>
        <member name="T:JulMar.Windows.Converters.DebugConverter">
            <summary>
            This provides a debugging output for a binding converter
            </summary>
        </member>
        <member name="M:JulMar.Windows.Converters.DebugConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Outputs all parameters to the debug console.
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Windows.Converters.DebugConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="P:JulMar.Windows.Converters.DebugConverter.Header">
            <summary>
            Header to add to string
            </summary>
        </member>
        <member name="T:JulMar.Windows.Converters.DoubleToIntegerConverter">
            <summary>
            This converts a double into an integer value, rounding the value off.
            It is useful when providing textual versions of scrollbar or slider values (on a tooltip).
            </summary>
        </member>
        <member name="M:JulMar.Windows.Converters.DoubleToIntegerConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Windows.Converters.DoubleToIntegerConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:JulMar.Windows.Converters.IntegerToBooleanConverter">
            <summary>
            Converts an integer value into a boolean true/false
            </summary>
        </member>
        <member name="M:JulMar.Windows.Converters.IntegerToBooleanConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Windows.Converters.IntegerToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Windows.Converters.IntegerToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="P:JulMar.Windows.Converters.IntegerToBooleanConverter.ZeroTreatment">
            <summary>
            Mapping for zero to Visibility.  Defaults to Collapsed.
            </summary>
        </member>
        <member name="P:JulMar.Windows.Converters.IntegerToBooleanConverter.NonzeroTreatment">
            <summary>
            Mapping for non-zero to Visibility.  Defaults to Visible.
            </summary>
        </member>
        <member name="T:JulMar.Windows.Converters.IntegerToVisibilityConverter">
            <summary>
            This converts an integer value to a Visibility type.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Converters.IntegerToVisibilityConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Windows.Converters.IntegerToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Windows.Converters.IntegerToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="P:JulMar.Windows.Converters.IntegerToVisibilityConverter.ZeroTreatment">
            <summary>
            Mapping for zero to Visibility.  Defaults to Collapsed.
            </summary>
        </member>
        <member name="P:JulMar.Windows.Converters.IntegerToVisibilityConverter.NonzeroTreatment">
            <summary>
            Mapping for non-zero to Visibility.  Defaults to Visible.
            </summary>
        </member>
        <member name="T:JulMar.Windows.Converters.NotBooleanConverter">
            <summary>
            This converter reverses a Boolean value (True == False, False == True).
            </summary>
        </member>
        <member name="M:JulMar.Windows.Converters.NotBooleanConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Windows.Converters.NotBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:JulMar.Windows.Converters.NullBooleanConverter">
            <summary>
            This converts an object value to a boolean
            </summary>
        </member>
        <member name="M:JulMar.Windows.Converters.NullBooleanConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Windows.Converters.NullBooleanConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Windows.Converters.NullBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="P:JulMar.Windows.Converters.NullBooleanConverter.NullTreatment">
            <summary>
            Mapping value for null - defaults to false.
            </summary>
        </member>
        <member name="P:JulMar.Windows.Converters.NullBooleanConverter.NonNullTreatment">
            <summary>
            Mapping value for non-null, defaults to true.
            </summary>
        </member>
        <member name="T:JulMar.Windows.Converters.NullOrEmptyBooleanConverter">
            <summary>
            This converts an object value to a boolean
            </summary>
        </member>
        <member name="M:JulMar.Windows.Converters.NullOrEmptyBooleanConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Windows.Converters.NullOrEmptyBooleanConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Windows.Converters.NullOrEmptyBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="P:JulMar.Windows.Converters.NullOrEmptyBooleanConverter.EmptyTreatment">
            <summary>
            Mapping value for null - defaults to false.
            </summary>
        </member>
        <member name="P:JulMar.Windows.Converters.NullOrEmptyBooleanConverter.NotEmptyTreatment">
            <summary>
            Mapping value for non-null, defaults to true.
            </summary>
        </member>
        <member name="T:JulMar.Windows.Converters.NullOrEmptyVisibilityConverter">
            <summary>
            This converts object presence to visibility.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Converters.NullOrEmptyVisibilityConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Windows.Converters.NullOrEmptyVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Windows.Converters.NullOrEmptyVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="P:JulMar.Windows.Converters.NullOrEmptyVisibilityConverter.EmptyTreatment">
            <summary>
            Visibility conversion when object is null.  Defaults to hidden.
            </summary>
        </member>
        <member name="P:JulMar.Windows.Converters.NullOrEmptyVisibilityConverter.NotEmptyTreatment">
            <summary>
            Visibility conversion when object is non-null.  Defaults to visible.
            </summary>
        </member>
        <member name="T:JulMar.Windows.Converters.NullVisibilityConverter">
            <summary>
            This converts object presence to visibility.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Converters.NullVisibilityConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Windows.Converters.NullVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Windows.Converters.NullVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="P:JulMar.Windows.Converters.NullVisibilityConverter.NullTreatment">
            <summary>
            Visibility conversion when object is null.  Defaults to hidden.
            </summary>
        </member>
        <member name="P:JulMar.Windows.Converters.NullVisibilityConverter.NonNullTreatment">
            <summary>
            Visibility conversion when object is non-null.  Defaults to visible.
            </summary>
        </member>
        <member name="T:JulMar.Windows.Converters.NumericToDoubleConverter">
            <summary>
            This converts any numeric type to a double.  It is primarily used in template bindings where an integer value
            is bound to a RangeBase.Value property which requires a double.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Converters.NumericToDoubleConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Windows.Converters.NumericToDoubleConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:JulMar.Windows.Converters.ToStringConverter">
            <summary>
            This converts anything to a string using the ToString method. This is useful if you 
            want to do simple formatting but the element is not a String (StringFormat only works with string types)
            </summary>
        </member>
        <member name="M:JulMar.Windows.Converters.ToStringConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:JulMar.Windows.Converters.ToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:JulMar.Core.Extensions.CollectionExtensions">
            <summary>
            A set of collection extension methods
            </summary>
        </member>
        <member name="M:JulMar.Core.Extensions.CollectionExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Enumerates a collection and executes a predicate against each item
            </summary>
            <typeparam name="T">Type of elements</typeparam>
            <param name="collection">Collection</param>
            <param name="action">Action to execute on each element</param>
        </member>
        <member name="M:JulMar.Core.Extensions.CollectionExtensions.BubbleSort``1(System.Collections.Generic.IList{``0},System.Func{``0,``0,System.Int32},System.Boolean)">
            <summary>
            Perform a sort of the items in a collection. This is useful
            if the underlying collection does not support sorting. 
            </summary>
            <param name="collection">Underlying collection to sort</param>
            <param name="comparer">Comparer delegate</param>
            <param name="reverse">True to reverse the collection</param>
        </member>
        <member name="M:JulMar.Core.Extensions.CollectionExtensions.BubbleSort``1(System.Collections.Generic.IList{``0},System.Boolean,System.Collections.Generic.IComparer{``0})">
            <summary>
            Perform a sort of the items in a collection. This is useful
            if the underlying collection does not support sorting. Note that
            the object type must be comparable.
            </summary>
            <param name="collection">Underlying collection to sort</param>
            <param name="reverse">True to reverse the collection</param>
            <param name="comparer">Comparer interface (defaults to default comparer for types)</param>
        </member>
        <member name="M:JulMar.Core.Extensions.CollectionExtensions.Compare``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.Boolean)">
            <summary>
            This is used to compare two collections.
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="collection">Collection Source</param>
            <param name="other">Collection to compare to</param>
            <param name="sameOrderRequired">Require same-order elements (exact match)</param>
            <returns></returns>
        </member>
        <member name="M:JulMar.Core.Extensions.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
             <summary>
             Add a range of IEnumerable collection to an existing Collection.
             </summary>
            <typeparam name="T">Type of collection</typeparam>
            <param name="collection">Collection</param>
             <param name="items">Items to add</param>
        </member>
        <member name="M:JulMar.Core.Extensions.CollectionExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
             This method tests an enumerable sequence and returns the index of the first item that
             passes the test.
            </summary>
            <typeparam name="T">Type of collection</typeparam>
            <param name="collection">Collection</param>
            <param name="test">Predicate test</param>
            <returns>Index (zero based) of first element that passed test, -1 if none did</returns>
        </member>
        <member name="M:JulMar.Core.Extensions.CollectionExtensions.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Swap a value in the collection
            </summary>
            <typeparam name="T">Type of collection</typeparam>
            <param name="collection">Source collection</param>
            <param name="sourceIndex">Index</param>
            <param name="destIndex">Dest index</param>
        </member>
        <member name="M:JulMar.Core.Extensions.CollectionExtensions.MoveRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            This method moves a range of values in the collection
            </summary>
            <typeparam name="T">Type of collection</typeparam>
            <param name="collection">Source collection</param>
            <param name="startingIndex">Index</param>
            <param name="count">Count of items</param>
            <param name="destIndex">Dest index</param>
        </member>
        <member name="T:JulMar.Windows.Extensions.DependencyObjectExtensions">
            <summary>
            Dependency Object extensions
            </summary>
        </member>
        <member name="M:JulMar.Windows.Extensions.DependencyObjectExtensions.FindElement``1(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Searches the sub-tree of an element (including that element) 
            for an element of a particular type.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Extensions.DependencyObjectExtensions.FindVisualParent(Windows.UI.Xaml.DependencyObject,System.Type)">
            <summary>
            This method locates the first visual parent of the given Type.
            </summary>
            <param name="fe">Framework Element</param>
            <param name="lookForType">Specific type to look for</param>
            <returns>Visual Parent</returns>
        </member>
        <member name="M:JulMar.Windows.Extensions.DependencyObjectExtensions.FindVisualParent``1(Windows.UI.Xaml.DependencyObject)">
            <summary>
            This method locates the first visual parent of the given Type.
            </summary>
            <typeparam name="T">Type to search for</typeparam>
            <param name="fe">Framework Element</param>
            <returns>Visual Parent</returns>
        </member>
        <member name="M:JulMar.Windows.Extensions.DependencyObjectExtensions.FindVisualChild``1(Windows.UI.Xaml.DependencyObject)">
            <summary>
            This method locates the first visual child of the given Type.
            </summary>
            <typeparam name="T">Type to search for</typeparam>
            <param name="fe">Framework Element</param>
            <returns>Visual Child</returns>
        </member>
        <member name="M:JulMar.Windows.Extensions.DependencyObjectExtensions.FindVisualChildByName``1(Windows.UI.Xaml.DependencyObject,System.String)">
            <summary>
            This method locates a visual child by NAME of the given Type.
            </summary>
            <typeparam name="T">Type to search for</typeparam>
            <param name="fe">Framework Element</param>
            <param name="name">Name to look for (assigned to Name property)</param>
            <returns>Visual Child or null</returns>
        </member>
        <member name="M:JulMar.Windows.Extensions.DependencyObjectExtensions.EnumerateVisualTree``1(Windows.UI.Xaml.DependencyObject,System.Predicate{``0})">
            <summary>
            A simple iterator method to expose the visual tree to LINQ (parent to child).
            </summary>
            <param name="start">Starting root</param>
            <param name="predicate">Predicate called for each item to provide filter (can be null)</param>
            <returns>Enumerable list of visuals</returns>
        </member>
        <member name="M:JulMar.Windows.Extensions.DependencyObjectExtensions.ReverseEnumerateVisualTree``1(Windows.UI.Xaml.DependencyObject,System.Predicate{``0})">
            <summary>
            A simple iterator method to expose the visual tree to LINQ going backwards (child to parent)
            </summary>
            <param name="start">Starting child</param>
            <param name="predicate">Predicate called for each item to provide filter (can be null)</param>
            <returns>Enumerable list of visuals</returns>
        </member>
        <member name="M:JulMar.Windows.Extensions.DependencyObjectExtensions.VisualChildren(Windows.UI.Xaml.DependencyObject)">
            <summary>
            This enumerates the children of the given starting DPO.
            </summary>
            <param name="fe">Start</param>
            <returns>Collection of children (enumerator)</returns>
        </member>
        <member name="M:JulMar.Windows.Extensions.DependencyObjectExtensions.TryFindResource(Windows.UI.Xaml.FrameworkElement,System.String,System.Object@)">
            <summary>
            Performs a resource lookup, walking up the parent chain.
            </summary>
            <param name="fe"></param>
            <param name="name"></param>
            <param name="value"> </param>
            <returns></returns>
        </member>
        <member name="T:JulMar.Windows.Extensions.Designer">
            <summary>
            Properties used to control the design surface details
            </summary>
        </member>
        <member name="P:JulMar.Windows.Extensions.Designer.InDesignMode">
            <summary>
            Returns true/false whether the code is currently being executed by a designer surface
            (Blend or Visual Studio).
            </summary>
        </member>
        <member name="T:JulMar.Core.Extensions.ExceptionExtensions">
            <summary>
            Extensions for the global Exception type
            </summary>
        </member>
        <member name="M:JulMar.Core.Extensions.ExceptionExtensions.Flatten(System.Exception,System.String,System.Boolean)">
            <summary>
            Flatten the exception and inner exception data.
            </summary>
            <param name="ex">Exception</param>
            <param name="message">Any string prefix to add</param>
            <param name="includeStackTrace">True to include stack trace at end</param>
            <returns>String with Message and all InnerException messages appended together</returns>
        </member>
        <member name="T:JulMar.Windows.Extensions.NotifyPropertyHelpers">
            <summary>
            This class provides a couple of extension methods for raising property change notifications.
            These allow easy implementation of INotifyPropertyChanged without deriving from a specific base class.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Extensions.NotifyPropertyHelpers.SetContext(System.ComponentModel.INotifyPropertyChanged,System.Threading.SynchronizationContext)">
            <summary>
            Method to set the context using just the INotifyPropertyChanged interface itself.
            You can also just set the above static property.
            </summary>
            <param name="sender"></param>
            <param name="uiContext"></param>
        </member>
        <member name="M:JulMar.Windows.Extensions.NotifyPropertyHelpers.Invoke(System.ComponentModel.PropertyChangedEventHandler,System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Method to invoke our logic on the correct thread.
            </summary>
            <param name="eh"></param>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Windows.Extensions.NotifyPropertyHelpers.RaiseAllPropertiesChanged(System.ComponentModel.INotifyPropertyChanged,System.ComponentModel.PropertyChangedEventHandler)">
            <summary>
            This can be used to indicate that all property values have changed.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Extensions.NotifyPropertyHelpers.RaisePropertyChanged``1(System.ComponentModel.INotifyPropertyChanged,System.ComponentModel.PropertyChangedEventHandler,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            This raises the INotifyPropertyChanged.PropertyChanged event to indicate
            a specific property has changed value. This version provides a compile-time safe
            way to indicate the property through the use of an expression tree / lambda.
            Be aware that for high-volume changes this version might be much slower than
            the above "magic-string" version due to the creation of an expression and runtime lookup.
            </summary>
            <example>
            <![CDATA[
               public string Name
               {
                  get { return _name; }
                  set
                  {
                      _name = value;
                      OnPropertyChanged(() => Name);
                  }
               }
            ]]>
            </example>
            <typeparam name="T">Type where it is being raised</typeparam>
            <param name="eh">Event Handler</param>
            <param name="propExpr">Property</param>
            <param name="sender">Sender</param>
        </member>
        <member name="M:JulMar.Windows.Extensions.NotifyPropertyHelpers.RaisePropertyChanged(System.ComponentModel.INotifyPropertyChanged,System.ComponentModel.PropertyChangedEventHandler,System.String)">
            <summary>
            This raises the INotifyPropertyChanged.PropertyChanged event to indicate
            a specific property has changed value.
            </summary>
            <param name="eh">Event Handler</param>
            <param name="name">Primary property</param>
            <param name="sender">Sender</param>
        </member>
        <member name="M:JulMar.Windows.Extensions.NotifyPropertyHelpers.SetPropertyValue``1(System.ComponentModel.INotifyPropertyChanged,System.ComponentModel.PropertyChangedEventHandler,``0@,``0,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            This is used to set a specific value for a property.
            </summary>
            <typeparam name="T">Type to set</typeparam>
            <param name="sender">Sender</param>
            <param name="eh">Event Handler</param>
            <param name="storageField">Storage field</param>
            <param name="newValue">New value</param>
            <param name="propExpr">Property expression</param>
        </member>
        <member name="M:JulMar.Windows.Extensions.NotifyPropertyHelpers.SetPropertyValue``1(System.ComponentModel.INotifyPropertyChanged,System.ComponentModel.PropertyChangedEventHandler,``0@,``0,System.String)">
            <summary>
            This is used to set a specific value for a property.
            </summary>
            <typeparam name="T">Type to set</typeparam>
            <param name="sender">Sender</param>
            <param name="eh">Event Handler</param>
            <param name="storageField">Storage field</param>
            <param name="newValue">New value</param>
            <param name="propertyName">Property Name</param>
        </member>
        <member name="P:JulMar.Windows.Extensions.NotifyPropertyHelpers.Context">
            <summary>
            Synchronization context used by Notify Helpers.
            </summary>
        </member>
        <member name="T:JulMar.Windows.Extensions.TaskExtensions">
            <summary>
            Extension methods for the Task type
            </summary>
        </member>
        <member name="M:JulMar.Windows.Extensions.TaskExtensions.NoWarning(System.Threading.Tasks.Task)">
            <summary>
            This can be used to remove compiler warnings when using async/await
            without consuming the results.
            </summary>
            <param name="task">The task to ignore</param>
        </member>
        <member name="M:JulMar.Windows.Extensions.TaskExtensions.NoWarning(Windows.Foundation.IAsyncInfo)">
            <summary>
            This can be used to remove compiler warnings when using async/await
            without consuming the results.
            </summary>
            <param name="asyncInfo">The WinRT operation to ignore</param>
        </member>
        <member name="T:JulMar.Windows.Interfaces.IDelegateCommand">
            <summary>
            An extension to ICommand to provide an ability to raise changed events.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IDelegateCommand.RaiseCanExecuteChanged">
            <summary>
            This method can be used to raise the CanExecuteChanged handler.
            This will force WPF to re-query the status of this command directly.
            This is not necessary if you use the AutoCanExecuteRequery feature.
            </summary>
        </member>
        <member name="T:JulMar.Windows.Interfaces.IFlyoutVisualizer">
            <summary>
            Flyout visualization service.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IFlyoutVisualizer.Show(System.String)">
            <summary>
            Show the flyout associated with the given key
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IFlyoutVisualizer.Show(System.String,System.Object,System.Action,System.Action)">
            <summary>
            Show the flyout associated with the given key, using the passed DataContext
            with optional open/close actions.
            </summary>
            <param name="key"></param>
            <param name="dataContext"></param>
            <param name="opened"></param>
            <param name="closed"></param>
        </member>
        <member name="T:JulMar.Core.Interfaces.IMessageMediator">
            <summary>
             The interface definition for our Message mediator.  This allows loose-event coupling between components
             in an application by sending messages to registered elements.
            </summary>
        </member>
        <member name="M:JulMar.Core.Interfaces.IMessageMediator.Register(System.Object)">
            <summary>
            This registers a Type with the mediator.  Any methods decorated with <seealso cref="T:JulMar.Core.MessageMediatorTargetAttribute"/> will be 
            registered as target method handlers for the given message key.
            </summary>
            <param name="view">Object to register</param>
        </member>
        <member name="M:JulMar.Core.Interfaces.IMessageMediator.Unregister(System.Object)">
            <summary>
            This method unregisters a type from the message mediator.
            </summary>
            <param name="view">Object to unregister</param>
        </member>
        <member name="M:JulMar.Core.Interfaces.IMessageMediator.RegisterHandler``1(System.String,System.Action{``0})">
            <summary>
            This registers a specific method as a message handler for a specific type.
            </summary>
            <param name="key">Message key</param>
            <param name="handler">Handler method</param>
        </member>
        <member name="M:JulMar.Core.Interfaces.IMessageMediator.RegisterHandler``1(System.Action{``0})">
            <summary>
            This registers a specific method as a message handler for a specific type.
            </summary>
            <param name="handler">Handler method</param>
        </member>
        <member name="M:JulMar.Core.Interfaces.IMessageMediator.UnregisterHandler``1(System.String,System.Action{``0})">
            <summary>
            This unregisters a method as a handler.
            </summary>
            <param name="key">Message key</param>
            <param name="handler">Handler</param>
        </member>
        <member name="M:JulMar.Core.Interfaces.IMessageMediator.UnregisterHandler``1(System.Action{``0})">
            <summary>
            This unregisters a method as a handler for a specific type
            </summary>
            <param name="handler">Handler</param>
        </member>
        <member name="M:JulMar.Core.Interfaces.IMessageMediator.SendMessage``1(System.String,``0)">
            <summary>
            This method broadcasts a message to all message targets for a given
            message key and passes a parameter.
            </summary>
            <param name="key">Message key</param>
            <param name="message">Message parameter</param>
            <returns>True/False if any handlers were invoked.</returns>
        </member>
        <member name="M:JulMar.Core.Interfaces.IMessageMediator.SendMessage``1(``0)">
            <summary>
            This method broadcasts a message to all message targets for a given parameter type.
            If a derived type is passed, any handlers for interfaces or base types will also be
            invoked.
            </summary>
            <param name="message">Message parameter</param>
            <returns>True/False if any handlers were invoked.</returns>
        </member>
        <member name="M:JulMar.Core.Interfaces.IMessageMediator.SendMessageAsync``1(System.String,``0)">
            <summary>
            This method broadcasts a message to all message targets for a given
            message key and passes a parameter.  The message targets are all called
            asynchronously and any resulting exceptions are ignored.
            </summary>
            <param name="key">Message key</param>
            <param name="message">Message parameter</param>
        </member>
        <member name="M:JulMar.Core.Interfaces.IMessageMediator.SendMessageAsync``1(``0)">
            <summary>
            This method broadcasts a message to all message targets for a given parameter type.
            If a derived type is passed, any handlers for interfaces or base types will also be
            invoked.  The message targets are all called asynchronously and any resulting exceptions
            are ignored.
            </summary>
            <param name="message">Message parameter</param>
        </member>
        <member name="T:JulMar.Windows.Interfaces.IMessageVisualizer">
            <summary>
            This interface abstracts the display of MessageBox style notifications
            </summary>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IMessageVisualizer.ShowAsync(System.String,System.String)">
            <summary>
            ShowAsync is used for simple notifications with an OK button.
            </summary>
            <param name="message">The content to display in the notification.</param>
            <param name="title">The optional title to be shown</param>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IMessageVisualizer.ShowAsync(System.String,System.String,JulMar.Windows.UI.MessageVisualizerOptions)">
            <summary>
            Display a notification to the user with options.
            </summary>
            <param name="message"></param>
            <param name="title"></param>
            <param name="visualizerOptions"></param>
            <returns></returns>
        </member>
        <member name="T:JulMar.Windows.Interfaces.NavigatingFromEventArgs">
            <summary>
            EventArgs for INavigationAware.OnNavigatingFrom
            </summary>
        </member>
        <member name="M:JulMar.Windows.Interfaces.NavigatingFromEventArgs.#ctor(Windows.UI.Xaml.Navigation.NavigationMode,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="M:JulMar.Windows.Interfaces.NavigatingFromEventArgs.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Constructor used for suspension
            </summary>
            <param name="stateDictionary"></param>
        </member>
        <member name="P:JulMar.Windows.Interfaces.NavigatingFromEventArgs.NavigationMode">
            <summary>
            Navigation model
            </summary>
        </member>
        <member name="P:JulMar.Windows.Interfaces.NavigatingFromEventArgs.Cancel">
            <summary>
            Set to true to cancel navigation
            </summary>
        </member>
        <member name="P:JulMar.Windows.Interfaces.NavigatingFromEventArgs.IsSuspending">
            <summary>
            True if this is being called due to a suspension event
            </summary>
        </member>
        <member name="P:JulMar.Windows.Interfaces.NavigatingFromEventArgs.State">
            <summary>
            The current page state
            </summary>
        </member>
        <member name="T:JulMar.Windows.Interfaces.NavigatedToEventArgs">
            <summary>
            EventArgs for the INavigationAware.OnNavigatedTo
            </summary>
        </member>
        <member name="M:JulMar.Windows.Interfaces.NavigatedToEventArgs.#ctor(Windows.UI.Xaml.Navigation.NavigationMode,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="P:JulMar.Windows.Interfaces.NavigatedToEventArgs.NavigationMode">
            <summary>
            Navigation mode for this event
            </summary>
        </member>
        <member name="P:JulMar.Windows.Interfaces.NavigatedToEventArgs.Parameter">
            <summary>
            Optional parameter being passed
            </summary>
        </member>
        <member name="P:JulMar.Windows.Interfaces.NavigatedToEventArgs.State">
            <summary>
            ViewModel/Page state
            </summary>
        </member>
        <member name="T:JulMar.Windows.Interfaces.INavigationAware">
            <summary>
            This interface can be implemented by a ViewModel or Page to save/restore state
            during navigation.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Interfaces.INavigationAware.OnNavigatingFrom(JulMar.Windows.Interfaces.NavigatingFromEventArgs)">
            <summary>
            Notification that the Page associated with the ViewModel is navigating away
            </summary>
        </member>
        <member name="M:JulMar.Windows.Interfaces.INavigationAware.OnNavigatedTo(JulMar.Windows.Interfaces.NavigatedToEventArgs)">
            <summary>
            Notification that the Page associated with the ViewModel is being navigating to
            </summary>
        </member>
        <member name="T:JulMar.Windows.Interfaces.IPageNavigator">
            <summary>
            This interface is used as the navigation services to switch pages in and out
            </summary>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IPageNavigator.RegisterPage(System.String,System.Type)">
            <summary>
            Used to register a page with a key through code
            </summary>
            <param name="key">Page key</param>
            <param name="type">Page type</param>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IPageNavigator.UnregisterPage(System.String)">
            <summary>
            Un-register a page.
            </summary>
            <param name="key">Page key to remove</param>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IPageNavigator.NavigateTo(System.String)">
            <summary>
            Navigate to a specific page
            </summary>
            <param name="pageKey">Page key</param>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IPageNavigator.NavigateTo(System.String,System.Object)">
            <summary>
            Navigate to a specific page
            </summary>
            <param name="pageKey">Page key</param>
            <param name="argument">Argument to pass (primitive type, may be null)</param>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IPageNavigator.NavigateTo(System.String,System.Object,System.Object)">
            <summary>
            Navigate to a specific page, passing parameters
            </summary>
            <param name="pageKey">Page key</param>
            <param name="argument">Argument to pass (primitive type, may be null)</param>
            <param name="viewModel">ViewModel to assign (may be null)</param>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IPageNavigator.GoBack">
            <summary>
            Go backward in the navigation chain
            </summary>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IPageNavigator.GoForward">
            <summary>
            Go forward in the navigation chain
            </summary>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IPageNavigator.SaveAsync">
            <summary>
            Used to save the navigation stack and should be called in the suspending event.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IPageNavigator.LoadAsync">
            <summary>
            Restore the navigation stack
            </summary>
        </member>
        <member name="P:JulMar.Windows.Interfaces.IPageNavigator.StateManager">
            <summary>
            Optional state manager, if supplied it will be passed with the navigation events
            allowing the page to save session state.
            </summary>
        </member>
        <member name="P:JulMar.Windows.Interfaces.IPageNavigator.CurrentPageKey">
            <summary>
            Returns the current page key (if known)
            </summary>
        </member>
        <member name="P:JulMar.Windows.Interfaces.IPageNavigator.CanGoBack">
            <summary>
            Return whether there is a page behind the current page in the navigation service
            </summary>
        </member>
        <member name="P:JulMar.Windows.Interfaces.IPageNavigator.CanGoForward">
            <summary>
            Return whether there is a page ahead the current page in the navigation service
            </summary>
        </member>
        <member name="P:JulMar.Windows.Interfaces.IPageNavigator.BackStackDepth">
            <value>
            The back stack depth.
            </value>
        </member>
        <member name="T:JulMar.Core.Interfaces.IServiceLocator">
            <summary>
            Interface that defines Add/Remove and typesafe Resolve
            </summary>
        </member>
        <member name="M:JulMar.Core.Interfaces.IServiceLocator.Exists(System.Type)">
            <summary>
            Returns whether the service exists.
            </summary>
            <param name="type">Type</param>
            <returns>True/False</returns>
        </member>
        <member name="M:JulMar.Core.Interfaces.IServiceLocator.Add(System.Type,System.Object)">
            <summary>
            Adds a new service to the resolver list
            </summary>
            <param name="type">Service Type (typically an interface)</param>
            <param name="value">Object that implements service</param>
        </member>
        <member name="M:JulMar.Core.Interfaces.IServiceLocator.Add``1(``0)">
            <summary>
            This adds a new service to the resolver list.
            </summary>
            <typeparam name="T">Type of the service</typeparam>
            <param name="value">Value</param>
        </member>
        <member name="M:JulMar.Core.Interfaces.IServiceLocator.Remove(System.Type)">
            <summary>
            Remove a service
            </summary>
            <param name="type">Type to remove</param>
        </member>
        <member name="M:JulMar.Core.Interfaces.IServiceLocator.Resolve``1">
            <summary>
            This resolves a service type and returns the implementation. Note that this
            assumes the key used to register the object is of the appropriate type or
            this method will throw an InvalidCastException!
            </summary>
            <typeparam name="T">Type to resolve</typeparam>
            <returns>Implementation</returns>
        </member>
        <member name="P:JulMar.Core.Interfaces.IServiceLocator.RegisteredServices">
            <summary>
            This returns all the registered services
            </summary>
        </member>
        <member name="T:JulMar.Windows.IO.RandomAccessStream">
            <summary>
            This class takes a .NET Stream and turns it into an IRandomAccessStream.
            It is not public, but is instead accessible through the AsRandomAccessStream() extension method.
            </summary>
        </member>
        <member name="F:JulMar.Windows.IO.RandomAccessStream._stream">
            <summary>
            The underlying stream.
            </summary>
        </member>
        <member name="M:JulMar.Windows.IO.RandomAccessStream.#ctor(System.IO.Stream)">
            <summary>
            Constructor which takes the stream to layer IRandomAccessStream on top of.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:JulMar.Windows.IO.RandomAccessStream.GetInputStreamAt(System.UInt64)">
            <summary>
            Returns an input stream at a specified location in a stream.
            </summary>
            <returns>
            The input stream.
            </returns>
            <param name="position">The location in the stream at which to begin.</param>
        </member>
        <member name="M:JulMar.Windows.IO.RandomAccessStream.GetOutputStreamAt(System.UInt64)">
            <summary>
            Returns an output stream at a specified location in a stream.
            </summary>
            <returns>
            The output stream.
            </returns>
            <param name="position">The location in the output stream at which to begin.</param>
        </member>
        <member name="M:JulMar.Windows.IO.RandomAccessStream.Seek(System.UInt64)">
            <summary>
            Sets the position of the stream to the specified value.
            </summary>
            <param name="position">The new position of the stream.</param>
        </member>
        <member name="M:JulMar.Windows.IO.RandomAccessStream.CloneStream">
            <summary>
            Creates a new instance of a IRandomAccessStream over the same resource as the current stream.
            </summary>
            <returns>
            The new stream. The initial, internal position of the stream is 0.The internal position and lifetime of this new stream are independent from the position and lifetime of the cloned stream.
            </returns>
        </member>
        <member name="M:JulMar.Windows.IO.RandomAccessStream.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:JulMar.Windows.IO.RandomAccessStream.ReadAsync(Windows.Storage.Streams.IBuffer,System.UInt32,Windows.Storage.Streams.InputStreamOptions)">
            <summary>
            Returns an asynchronous byte reader object.
            </summary>
            <returns>
            The asynchronous operation. 
            </returns>
            <param name="buffer">The buffer into which the asynchronous read operation places the bytes that are read.</param><param name="count">The number of bytes to read that is less than or equal to the Capacity value.</param><param name="options">Specifies the type of the asynchronous read operation.</param>
        </member>
        <member name="M:JulMar.Windows.IO.RandomAccessStream.FlushAsync">
            <summary>
            Flushes data asynchronously in a sequential stream.
            </summary>
            <returns>
            The stream flush operation.
            </returns>
        </member>
        <member name="M:JulMar.Windows.IO.RandomAccessStream.WriteAsync(Windows.Storage.Streams.IBuffer)">
            <summary>
            Writes data asynchronously in a sequential stream.
            </summary>
            <returns>
            The byte writer operation.
            </returns>
            <param name="buffer">The buffer into which the asynchronous writer operation writes.</param>
        </member>
        <member name="P:JulMar.Windows.IO.RandomAccessStream.Size">
            <summary>
            Gets or sets the size of the random access stream.
            </summary>
            <returns>
            The size of the stream.
            </returns>
        </member>
        <member name="P:JulMar.Windows.IO.RandomAccessStream.CanRead">
            <summary>
            Gets a value that indicates whether the stream can be read from.
            </summary>
            <returns>
            True if the stream can be read from. Otherwise, false.
            </returns>
        </member>
        <member name="P:JulMar.Windows.IO.RandomAccessStream.CanWrite">
            <summary>
            Gets a value that indicates whether the stream can be written to.
            </summary>
            <returns>
            True if the stream can be written to. Otherwise, false.
            </returns>
        </member>
        <member name="P:JulMar.Windows.IO.RandomAccessStream.Position">
            <summary>
            Gets the byte offset of the stream.
            </summary>
            <returns>
            The number of bytes from the start of the stream.
            </returns>
        </member>
        <member name="T:JulMar.Windows.IO.StreamExtensions">
            <summary>
            Extension methods for streams
            </summary>
        </member>
        <member name="M:JulMar.Windows.IO.StreamExtensions.AsRandomAccessStream(System.IO.Stream)">
            <summary>
            Returns an IRandomAccessStream for a given stream input
            </summary>
            <param name="stream">Stream to wrap</param>
            <returns>WinRT RandomAccessStream</returns>
        </member>
        <member name="T:JulMar.Windows.Interfaces.IStateManager">
            <summary>
            State manager service.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IStateManager.GetDictionary(System.String,System.Boolean)">
            <summary>
            Retrieve the state dictionary for a given key
            </summary>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IStateManager.RemoveDictionary(System.String)">
            <summary>
            Removes a state dictionary for a given key
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IStateManager.LoadObject(System.String,System.Object)">
            <summary>
            Loads an object's state from a given key in the dictionary
            </summary>
            <param name="key"></param>
            <param name="viewModel"></param>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IStateManager.SaveObject(System.String,System.Object)">
            <summary>
            Saves an object's state into the dictionary using a given key.
            </summary>
            <param name="key"></param>
            <param name="viewModel"></param>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IStateManager.LoadAsync">
            <summary>
            Restore the state from persistent storage
            </summary>
            <returns></returns>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IStateManager.SaveAsync">
            <summary>
            Save the state to persistent storage
            </summary>
            <returns></returns>
        </member>
        <member name="P:JulMar.Windows.Interfaces.IStateManager.Filename">
            <summary>
            Filename to use for storage
            Other implementations might not use this.
            </summary>
        </member>
        <member name="P:JulMar.Windows.Interfaces.IStateManager.KnownTypes">
            <summary>
            List of known types which may be serialized by the state manager
            Other implementations might not use this.
            </summary>
        </member>
        <member name="T:JulMar.Windows.Interfaces.IViewModelStateManagement">
            <summary>
            This interface allows a ViewModel to take control of serialization
            into the state dictionary when the StateManager below is used. This is 
            only used when LoadObject/SaveObject is used.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IViewModelStateManagement.SaveState(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Called to save custom state in the supplied dictionary.
            </summary>
            <param name="stateDictionary">Dictionary to save state into</param>
            <returns>True to continue saving object using reflection, false to stop (if all state is persisted through custom mechanism)</returns>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IViewModelStateManagement.RestoreState(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Called to restore custom state from the supplied dictionary.
            </summary>
            <param name="stateDictionary">Dictionary to restore state from</param>
            <returns>True to continue restoring object using reflection, false to stop (if all state is persisted through custom mechanism)</returns>
        </member>
        <member name="T:JulMar.Windows.Serialization.Json">
            <summary>
            Class used to serialize/deserialize from JSON.  
            This was contributed by Paulo Quicoli (pauloquicoli@gmail.com)
            </summary>
        </member>
        <member name="M:JulMar.Windows.Serialization.Json.Serialize(System.Object,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            This method serializes an object or graph into a JSON string
            </summary>
            <param name="instance">Instance to serialize</param>
            <param name="knownTypes">Additional known types</param>
            <returns>String</returns>
        </member>
        <member name="M:JulMar.Windows.Serialization.Json.Deserialize``1(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            This takes a JSON string and turns it into an object or graph.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="stream">JSON string</param>
            <param name="knownTypes">Additional known types</param>
            <returns>Object graph</returns>
        </member>
        <member name="M:JulMar.Windows.Serialization.Json.Deserialize(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            This takes a JSON string and turns it into an object or graph.
            </summary>
            <param name="type">Type</param>
            <param name="stream">JSON string</param>
            <param name="knownTypes">Additional known types</param>
            <returns>Object graph</returns>
        </member>
        <member name="T:JulMar.Windows.Serialization.Xml">
            <summary>
            Class used to serialize/deserialize from XML.  
            </summary>
        </member>
        <member name="M:JulMar.Windows.Serialization.Xml.Serialize(System.Object,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            This method serializes an object or graph into an XML string
            </summary>
            <param name="instance">Instance to serialize</param>
            <param name="knownTypes">Additional known types</param>
            <returns>String</returns>
        </member>
        <member name="M:JulMar.Windows.Serialization.Xml.Deserialize``1(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            This takes a JSON string and turns it into an object or graph.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="stream">JSON string</param>
            <param name="knownTypes">Known types</param>
            <returns>Object graph</returns>
        </member>
        <member name="M:JulMar.Windows.Serialization.Xml.Deserialize(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            This takes a JSON string and turns it into an object or graph.
            </summary>
            <param name="type">Type</param>
            <param name="stream">JSON string</param>
            <param name="knownTypes">Known types</param>
            <returns>Object graph</returns>
        </member>
        <member name="T:JulMar.Windows.Services.AutoSerializingPageNavigator">
            <summary>
            Page navigation service with auto-serialization support (JSon)
            </summary>
            <example>
            Replace default navigator in App.xaml.cs constructor:
                 ServiceLocator.Instance.Add(typeof(IPageNavigator), new AutoSerializingPageNavigator());
            </example>
            <remarks>
            Note that view model must all be serializable and use OnDeserialized initializers.
            </remarks>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.Initialize">
            <summary>
            Initialize the navigator by hooking into the frame navigation events.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.RootFrameOnNavigating(System.Object,Windows.UI.Xaml.Navigation.NavigatingCancelEventArgs)">
            <summary>
            This is called when navigating FROM a page to a new page and handles the OnNavigatingFrom event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.HandleOnNavigatingFrom(Windows.UI.Xaml.Controls.Frame,Windows.UI.Xaml.Navigation.NavigationMode,System.Boolean@,System.Boolean)">
            <summary>
            Handles the OnNavigatingFrom event which notifies a page/ViewModel that we are
            moving AWAY from that view.
            </summary>
            <param name="rootFrame"></param>
            <param name="navMode"></param>
            <param name="cancel"></param>
            <param name="suspending"></param>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.RootFrameOnNavigated(System.Object,Windows.UI.Xaml.Navigation.NavigationEventArgs)">
            <summary>
            This handles the Navigated TO event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.InflateViewModel(System.String)">
            <summary>
            Creates the ViewModel from a string.
            </summary>
            <param name="viewModelData"></param>
            <returns></returns>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.HandleOnNavigatingTo(Windows.UI.Xaml.FrameworkElement,System.Object,Windows.UI.Xaml.Navigation.NavigationMode,System.Object)">
            <summary>
            Handles the navigation when we are moving TO a new view/viewmodel.
            </summary>
            <param name="view"></param>
            <param name="viewModel"></param>
            <param name="navMode"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.ClearForwardHistory">
            <summary>
            Clear the back history
            </summary>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.RegisterPage(System.String,System.Type)">
            <summary>
            Used to register a page with a key through code
            </summary>
            <param name="key"></param>
            <param name="type"></param>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.UnregisterPage(System.String)">
            <summary>
            Unregister a page.
            </summary>
            <param name="key">Page key to remove</param>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.NavigateTo(System.String)">
            <summary>
            Navigate to a specific page
            </summary>
            <param name="pageKey">Page key</param>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.NavigateTo(System.String,System.Object)">
            <summary>
            Navigate to a specific page, passing parameters
            </summary>
            <param name="pageKey">Page key</param>
            <param name="argument">Serializable view model, or argument to pass</param>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.NavigateTo(System.String,System.Object,System.Object)">
            <summary>
            Navigate to a specific page, passing parameters, this method 
            is not supported by the auto serializing navigator.
            </summary>
            <param name="pageKey">Page key</param>
            <param name="argument">Argument to pass (primitive type, may be null)</param>
            <param name="viewModel">ViewModel to assign (may be null)</param>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.NavigateTo(System.Type)">
            <summary>
            Navigate to a specific page
            </summary>
            <param name="pageType">Page Type</param>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.NavigateTo(System.Type,System.Object)">
            <summary>
            Navigate to a specific page
            </summary>
            <param name="pageType">Page Type</param>
            <param name="argument">Serializable view model, or argument to pass</param>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.NavigateTo(System.Type,System.Object,System.Object)">
            <summary>
            Navigate to a specific page, passing parameters
            </summary>
            <param name="pageType">Page Type</param>
            <param name="argument">Argument to pass (primitive type, may be null)</param>
            <param name="viewModel">ViewModel to assign (may be null)</param>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.GenerateStateKey(System.String)">
            <summary>
            Generates the state key name
            </summary>
            <returns></returns>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.GoBack">
            <summary>
            Go backward in the navigation chain
            </summary>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.GoForward">
            <summary>
            Go forward in the navigation chain
            </summary>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.SaveAsync">
            <summary>
            Used to save the navigation stack and should be called in the suspending event.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.LoadAsync">
            <summary>
            Restore the navigation stack
            </summary>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.ProcessSuspend">
            <summary>
            This is used to process a suspension
            </summary>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.ProcessRestore(System.String)">
            <summary>
            Restore the current VM state after suspension
            </summary>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.SetNavigationTarget(Windows.UI.Xaml.Controls.Frame,System.String)">
            <summary>
            This method can be used to change the frame which is being used for navigation
            for this specific navigator.
            </summary>
            <param name="frame">Frame to use</param>
            <param name="frameKey">Suspension key</param>
        </member>
        <member name="M:JulMar.Windows.Services.AutoSerializingPageNavigator.GatherPageViewData">
            <summary>
            This method uses an internal object to gather the list of ViewModels based
            on the ExportViewModel attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="P:JulMar.Windows.Services.AutoSerializingPageNavigator.NavigationFrame">
            <summary>
            The root Frame 
            </summary>
        </member>
        <member name="P:JulMar.Windows.Services.AutoSerializingPageNavigator.StateManager">
            <summary>
            Optional state manager, if not supplied pulls the default.
            </summary>
        </member>
        <member name="P:JulMar.Windows.Services.AutoSerializingPageNavigator.CurrentPageKey">
            <summary>
            Returns the current page key (if known)
            </summary>
        </member>
        <member name="P:JulMar.Windows.Services.AutoSerializingPageNavigator.CanGoBack">
            <summary>
            Return whether there is a page behind the current page in the navigation service
            </summary>
        </member>
        <member name="P:JulMar.Windows.Services.AutoSerializingPageNavigator.CanGoForward">
            <summary>
            Return whether there is a page ahead the current page in the navigation service
            </summary>
        </member>
        <member name="P:JulMar.Windows.Services.AutoSerializingPageNavigator.BackStackDepth">
            <value>
            The back stack depth.
            </value>
        </member>
        <member name="T:JulMar.Windows.Internal.ServiceLocatorExportProvider">
            <summary>
            This simple export provider searches the ServiceLocator for exports.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Internal.ServiceLocatorExportProvider.GetExportDescriptors(System.Composition.Hosting.Core.CompositionContract,System.Composition.Hosting.Core.DependencyAccessor)">
            <summary>
            Promise export descriptors for the specified export key.
            </summary>
            <param name="contract">The export key required by another component.</param><param name="descriptorAccessor">Accesses the other export descriptors present in the composition.</param>
            <returns>
            Promises for new export descriptors.
            </returns>
            <remarks>
            A provider will only be queried once for each unique export key.
            The descriptor accessor can only be queried immediately if the descriptor being promised is an adapter, such as
            <see cref="T:System.Lazy`1"/>; otherwise, dependencies should only be queried within execution of the function provided
            to the <see cref="T:System.Composition.Hosting.Core.ExportDescriptorPromise"/>. The actual descriptors provided should not close over or reference any
            aspect of the dependency/promise structure, as this should be able to be GC'ed.
            </remarks>
        </member>
        <member name="T:JulMar.Windows.UI.FlyoutPageMetadata">
            <summary>
            Class used to populate metadata used to identify flyouts.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.FlyoutPageMetadata.Key">
            <summary>
            Key used to export the view.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.FlyoutPageMetadata.Type">
            <summary>
            Type used to instantiate the view.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.ExportFlyoutAttribute">
            <summary>
            This is used to decorate a flyout page and associate it to a string key.
            </summary>
        </member>
        <member name="M:JulMar.Windows.UI.ExportFlyoutAttribute.#ctor(System.String,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="key">Key used to locate page</param>
            <param name="type">Page type</param>
        </member>
        <member name="P:JulMar.Windows.UI.ExportFlyoutAttribute.Key">
            <summary>
            Key used to export the view.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.ExportFlyoutAttribute.Type">
            <summary>
            Type used to instantiate the view.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.FlyoutPageData">
            <summary>
            Class used to locate views but keep property hidden
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.FlyoutPageData.LocatedFlyouts">
            <summary>
            Located view models
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.FlyoutVisualizer">
            <summary>
            Page navigation service
            </summary>
        </member>
        <member name="M:JulMar.Windows.UI.FlyoutVisualizer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Windows.UI.FlyoutVisualizer.WindowOnSizeChanged(System.Object,Windows.UI.Core.WindowSizeChangedEventArgs)">
            <summary>
            Used to activate a flyout when the original view was snapped.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Windows.UI.FlyoutVisualizer.Show(System.String)">
            <summary>
            Show the flyout associated with the given key
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:JulMar.Windows.UI.FlyoutVisualizer.Show(System.String,System.Object,System.Action,System.Action)">
            <summary>
            Show the flyout associated with the given key, using the passed DataContext
            with optional open/close actions.
            </summary>
            <param name="key"></param>
            <param name="dataContext"></param>
            <param name="opened"></param>
            <param name="closed"></param>
        </member>
        <member name="M:JulMar.Windows.UI.FlyoutVisualizer.RegisterFlyout(System.String,System.Type)">
            <summary>
            Used to register a flyout with a key through code
            </summary>
            <param name="key"></param>
            <param name="type"></param>
        </member>
        <member name="M:JulMar.Windows.UI.FlyoutVisualizer.UnregisterFlyout(System.String)">
            <summary>
            Unregister a flyout.
            </summary>
            <param name="key">Page key to remove</param>
        </member>
        <member name="M:JulMar.Windows.UI.FlyoutVisualizer.GatherFlyoutPages">
            <summary>
            This method uses an internal object to gather the list of flyouts.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JulMar.Windows.Services.ViewModelStateAttribute">
            <summary>
            Attribute used to mark properties which should be persisted to dictionary.
            The properties MUST be public and have public setters.
            </summary>
        </member>
        <member name="T:JulMar.Windows.Services.StateManager">
            <summary>
            State Manager class to load and save a ViewModel to a dictionary
            </summary>
        </member>
        <member name="M:JulMar.Windows.Services.StateManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:JulMar.Windows.Services.StateManager._values">
            <summary>
            Values collection
            </summary>
        </member>
        <member name="M:JulMar.Windows.Services.StateManager.GetDictionary(System.String,System.Boolean)">
            <summary>
            Returns the state-specific dictionary for a key
            </summary>
            <param name="key"></param>
            <param name="create"></param>
            <returns></returns>
        </member>
        <member name="M:JulMar.Windows.Services.StateManager.RemoveDictionary(System.String)">
            <summary>
            Removes the given state dictionary based on the key
            </summary>
            <param name="key"></param>
            <returns>Success code</returns>
        </member>
        <member name="M:JulMar.Windows.Services.StateManager.LoadObject(System.String,System.Object)">
            <summary>
            Loads an object's state from a given key in the dictionary
            </summary>
            <param name="key">Key</param>
            <param name="viewModel">ViewModel object</param>
        </member>
        <member name="M:JulMar.Windows.Services.StateManager.SaveObject(System.String,System.Object)">
            <summary>
            Saves an object's state into the dictionary using a given key.
            </summary>
            <param name="key"></param>
            <param name="viewModel"></param>
        </member>
        <member name="M:JulMar.Windows.Services.StateManager.LoadAsync">
            <summary>
            Restore the state from persistent storage
            </summary>
            <returns></returns>
        </member>
        <member name="M:JulMar.Windows.Services.StateManager.SaveAsync">
            <summary>
            Encrypts and saves the state to persistent storage
            </summary>
            <returns></returns>
        </member>
        <member name="M:JulMar.Windows.Services.StateManager.Load(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Loads the state of an object (ViewModel) from the state dictionary.
            </summary>
            <param name="stateDictionary"></param>
            <param name="viewModel"></param>
            <param name="properties"></param>
        </member>
        <member name="M:JulMar.Windows.Services.StateManager.Save(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Saves a ViewModel into a child dictionary using a specific key
            </summary>
            <param name="stateDictionary"></param>
            <param name="viewModel"></param>
            <param name="properties"></param>
        </member>
        <member name="P:JulMar.Windows.Services.StateManager.Filename">
            <summary>
            Filename to use for storage
            </summary>
        </member>
        <member name="P:JulMar.Windows.Services.StateManager.KnownTypes">
            <summary>
            List of known types
            </summary>
        </member>
        <member name="T:JulMar.Windows.Services.StateManagerException">
            <summary>
            Exception used when the state manager fails to load or save the settings.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Services.StateManagerException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Windows.Services.StateManagerException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Windows.Services.StateManagerException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:JulMar.Windows.Services.PageViewMetadata">
            <summary>
            Class used to populate metadata used to identify views which 
            may be navigated to/from.
            </summary>
        </member>
        <member name="P:JulMar.Windows.Services.PageViewMetadata.Key">
            <summary>
            Key used to export the view.
            </summary>
        </member>
        <member name="P:JulMar.Windows.Services.PageViewMetadata.Type">
            <summary>
            Type used to instantiate the view.
            </summary>
        </member>
        <member name="T:JulMar.Windows.Services.ExportPageAttribute">
            <summary>
            This is used to decorate a specific page in the UI and associate
            it to a string key.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Services.ExportPageAttribute.#ctor(System.String,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="key">Key used to locate page</param>
            <param name="type">Page type</param>
        </member>
        <member name="P:JulMar.Windows.Services.ExportPageAttribute.Key">
            <summary>
            Key used to export the view.
            </summary>
        </member>
        <member name="P:JulMar.Windows.Services.ExportPageAttribute.Type">
            <summary>
            Type used to instantiate the view.
            </summary>
        </member>
        <member name="T:JulMar.Windows.Services.PageViewData">
            <summary>
            Class used to locate views but keep property hidden
            </summary>
        </member>
        <member name="P:JulMar.Windows.Services.PageViewData.LocatedPages">
            <summary>
            Located view models
            </summary>
        </member>
        <member name="T:JulMar.Windows.Services.PageNavigator">
            <summary>
            Page navigation service
            </summary>
        </member>
        <member name="M:JulMar.Windows.Services.PageNavigator.RootFrameOnNavigated(System.Object,Windows.UI.Xaml.Navigation.NavigationEventArgs)">
            <summary>
            This handles the Navigated TO event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Windows.Services.PageNavigator.HandleOnNavigatingTo(Windows.UI.Xaml.FrameworkElement,System.Object,Windows.UI.Xaml.Navigation.NavigationMode,System.Object)">
            <summary>
            Handles the navigation when we are moving TO a new view/viewmodel.
            </summary>
            <param name="view"></param>
            <param name="viewModel"></param>
            <param name="navMode"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:JulMar.Windows.Services.PageNavigator.RootFrameOnNavigating(System.Object,Windows.UI.Xaml.Navigation.NavigatingCancelEventArgs)">
            <summary>
            This is called when navigating FROM a page to a new page and handles the OnNavigatingFrom event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Windows.Services.PageNavigator.HandleOnNavigatingFrom(Windows.UI.Xaml.Controls.Frame,Windows.UI.Xaml.Navigation.NavigationMode,System.Boolean@,System.Boolean)">
            <summary>
            Handles the OnNavigatingFrom event which notifies a page/ViewModel that we are
            moving AWAY from that view.
            </summary>
            <param name="rootFrame"></param>
            <param name="navMode"></param>
            <param name="cancel"></param>
            <param name="suspending"></param>
        </member>
        <member name="M:JulMar.Windows.Services.PageNavigator.RegisterPage(System.String,System.Type)">
            <summary>
            Used to register a page with a key through code
            </summary>
            <param name="key"></param>
            <param name="type"></param>
        </member>
        <member name="M:JulMar.Windows.Services.PageNavigator.UnregisterPage(System.String)">
            <summary>
            Unregister a page.
            </summary>
            <param name="key">Page key to remove</param>
        </member>
        <member name="M:JulMar.Windows.Services.PageNavigator.NavigateTo(System.String)">
            <summary>
            Navigate to a specific page
            </summary>
            <param name="pageKey">Page key</param>
        </member>
        <member name="M:JulMar.Windows.Services.PageNavigator.NavigateTo(System.String,System.Object)">
            <summary>
            Navigate to a specific page, passing parameters
            </summary>
            <param name="pageKey">Page key</param>
            <param name="argument">Argument to pass (primitive type, may be null)</param>
        </member>
        <member name="M:JulMar.Windows.Services.PageNavigator.NavigateTo(System.String,System.Object,System.Object)">
            <summary>
            Navigate to a specific page, passing parameters
            </summary>
            <param name="pageKey">Page key</param>
            <param name="argument">Argument to pass (primitive type, may be null)</param>
            <param name="viewModel">ViewModel to assign (may be null)</param>
        </member>
        <member name="M:JulMar.Windows.Services.PageNavigator.NavigateTo(System.Type)">
            <summary>
            Navigate to a specific page
            </summary>
            <param name="pageType">Page Type</param>
        </member>
        <member name="M:JulMar.Windows.Services.PageNavigator.NavigateTo(System.Type,System.Object)">
            <summary>
            Navigate to a specific page
            </summary>
            <param name="pageType">Page Type</param>
            <param name="argument">Argument to pass (primitive type, may be null)</param>
        </member>
        <member name="M:JulMar.Windows.Services.PageNavigator.GenerateStateKey(System.String)">
            <summary>
            Generates the state key name
            </summary>
            <returns></returns>
        </member>
        <member name="M:JulMar.Windows.Services.PageNavigator.NavigateTo(System.Type,System.Object,System.Object)">
            <summary>
            Navigate to a specific page, passing parameters
            </summary>
            <param name="pageType">Page Type</param>
            <param name="argument">Argument to pass (primitive type, may be null)</param>
            <param name="viewModel">ViewModel to assign (may be null)</param>
        </member>
        <member name="M:JulMar.Windows.Services.PageNavigator.GoBack">
            <summary>
            Go backward in the navigation chain
            </summary>
        </member>
        <member name="M:JulMar.Windows.Services.PageNavigator.GoForward">
            <summary>
            Go forward in the navigation chain
            </summary>
        </member>
        <member name="M:JulMar.Windows.Services.PageNavigator.ClearForwardHistory">
            <summary>
            Clear the back history
            </summary>
        </member>
        <member name="M:JulMar.Windows.Services.PageNavigator.ProcessSuspend">
            <summary>
            This is used to process a suspension
            </summary>
        </member>
        <member name="M:JulMar.Windows.Services.PageNavigator.ProcessRestore">
            <summary>
            Restore the current VM state after suspension
            </summary>
        </member>
        <member name="M:JulMar.Windows.Services.PageNavigator.SaveAsync">
            <summary>
            Used to save the navigation stack and should be called in the suspending event.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Services.PageNavigator.LoadAsync">
            <summary>
            Restore the navigation stack
            </summary>
        </member>
        <member name="M:JulMar.Windows.Services.PageNavigator.SetNavigationTarget(Windows.UI.Xaml.Controls.Frame,System.String)">
            <summary>
            This method can be used to change the frame which is being used for navigation
            for this specific navigator.
            </summary>
            <param name="frame">Frame to use</param>
            <param name="frameKey">Suspension key</param>
        </member>
        <member name="M:JulMar.Windows.Services.PageNavigator.GatherPageViewData">
            <summary>
            This method uses an internal object to gather the list of ViewModels based
            on the ExportViewModel attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="P:JulMar.Windows.Services.PageNavigator.NavigationFrame">
            <summary>
            The root Frame 
            </summary>
        </member>
        <member name="P:JulMar.Windows.Services.PageNavigator.StateManager">
            <summary>
            Optional state manager, if not supplied pulls the default.
            </summary>
        </member>
        <member name="P:JulMar.Windows.Services.PageNavigator.CurrentPageKey">
            <summary>
            Returns the current page key (if known)
            </summary>
        </member>
        <member name="P:JulMar.Windows.Services.PageNavigator.CanGoBack">
            <summary>
            Return whether there is a page behind the current page in the navigation service
            </summary>
        </member>
        <member name="P:JulMar.Windows.Services.PageNavigator.CanGoForward">
            <summary>
            Return whether there is a page ahead the current page in the navigation service
            </summary>
        </member>
        <member name="P:JulMar.Windows.Services.PageNavigator.BackStackDepth">
            <value>
            The back stack depth.
            </value>
        </member>
        <member name="T:JulMar.Windows.UI.AccessKey">
            <summary>
            Class to add an accelerator key to a control
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.AccessKey.AcceleratorProperty">
            <summary>
            Keyboard accelerator
            </summary>
        </member>
        <member name="M:JulMar.Windows.UI.AccessKey.GetAccelerator(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Retrieve the keyboard accelerator for an element.
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:JulMar.Windows.UI.AccessKey.SetAccelerator(Windows.UI.Xaml.FrameworkElement,System.String)">
            <summary>
            Sets the keyboard accelerator for an element.
            </summary>
            <param name="owner"></param>
            <param name="keyText"></param>
        </member>
        <member name="M:JulMar.Windows.UI.AccessKey.ParseKeys(System.String)">
            <summary>
            Returns a list of virtual keys from a string.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:JulMar.Windows.UI.AccessKey.CoreWindowOnActivated(Windows.UI.Core.CoreWindow,Windows.UI.Core.WindowActivatedEventArgs)">
            <summary>
            Called when the window gets or loses input focus
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Windows.UI.AccessKey.DispatcherOnAcceleratorKeyActivated(Windows.UI.Core.CoreDispatcher,Windows.UI.Core.AcceleratorKeyEventArgs)">
            <summary>
            Detect an accelerator key
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Windows.UI.AccessKey.CheckForActiveKey">
            <summary>
            Look for an active key and shift focus when found.
            </summary>
        </member>
        <member name="M:JulMar.Windows.UI.AccessKey.OwnerOnUnloaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Called when a specific control we are monitoring is unloaded.
            We remove it from the list we are holding onto.
            </summary>
            <param name="sender"></param>
            <param name="routedEventArgs"></param>
        </member>
        <member name="T:JulMar.Windows.UI.InputBinder">
            <summary>
            InputBinder binds keyboard events to ICommand implementations
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.InputBinder.MappingsProperty">
            <summary>
            Mappings backing store
            </summary>
        </member>
        <member name="M:JulMar.Windows.UI.InputBinder.GetMappings(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Retrieves the mapping collection
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:JulMar.Windows.UI.InputBinder.SetMappings(Windows.UI.Xaml.DependencyObject,JulMar.Windows.UI.InputBinderCollection)">
            <summary>
            This sets the mapping collection.
            </summary>
            <param name="obj">Dependency Object</param>
            <param name="value">Mapping collection</param>
        </member>
        <member name="M:JulMar.Windows.UI.InputBinder.OnMappingsChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            This changes the event mapping
            </summary>
            <param name="target"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Windows.UI.InputBinder.CoreWindowOnActivated(Windows.UI.Core.CoreWindow,Windows.UI.Core.WindowActivatedEventArgs)">
            <summary>
            Called when the window gets or loses input focus
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Windows.UI.InputBinder.OnForwardDataContext(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This is called when items are added to the collection.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Windows.UI.InputBinder.DispatcherOnAcceleratorKeyActivated(Windows.UI.Core.CoreDispatcher,Windows.UI.Core.AcceleratorKeyEventArgs)">
            <summary>
            Called when an accelerator key is pressed (i.e. a key with a Menu)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Windows.UI.InputBinder.SenderOnUnloaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            The associated Page has been unloaded - want to detach
            from the global key events
            </summary>
            <param name="sender"></param>
            <param name="routedEventArgs"></param>
        </member>
        <member name="M:JulMar.Windows.UI.InputBinder.CheckForActiveKey">
            <summary>
            Checks for any input binding match in the current keyboard state.
            If we find one, run the associated command.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.InputBinding">
            <summary>
            A single input binding
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.InputBinding.CommandProperty">
            <summary>
            Command Property Dependency Property
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.InputBinding.CommandParameterProperty">
            <summary>
            Parameter for the ICommand
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.InputBinding.KeyProperty">
            <summary>
            Parameter for the Key
            </summary>
        </member>
        <member name="M:JulMar.Windows.UI.InputBinding.OnKeyChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the key associated with this command changes.
            </summary>
            <param name="dpo"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Windows.UI.InputBinding.OnKeyChanged(System.String)">
            <summary>
            Called when the key associated with this command changes.
            </summary>
            <param name="keys">Keys</param>
        </member>
        <member name="M:JulMar.Windows.UI.InputBinding.CheckKey(System.Collections.Generic.IList{Windows.System.VirtualKey})">
            <summary>
            Check a set of keys against a string
            </summary>
            <param name="keys">Keys</param>
            <returns></returns>
        </member>
        <member name="P:JulMar.Windows.UI.InputBinding.Command">
            <summary>
            Gets or sets the Command property. 
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.InputBinding.CommandParameter">
            <summary>
            Gets or sets the CommandParameter property.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.InputBinding.Key">
            <summary>
            Key which invokes command
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.InputBinderCollection">
            <summary>
            Collection of input bindings
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.MessageVisualizerOptions">
            <summary>
            Options passed to IMessageVisualizer.  Can create derived class to pass
            custom data into private implementation.
            </summary>
        </member>
        <member name="M:JulMar.Windows.UI.MessageVisualizerOptions.#ctor(Windows.UI.Popups.IUICommand)">
            <summary>
            Constructor for single-button messages
            </summary>
        </member>
        <member name="M:JulMar.Windows.UI.MessageVisualizerOptions.#ctor(System.Collections.Generic.IEnumerable{Windows.UI.Popups.IUICommand})">
            <summary>
            Constructor to create simple prompt
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.MessageVisualizerOptions.Commands">
            <summary>
            Button handlers
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.MessageVisualizerOptions.DefaultCommandIndex">
            <summary>
            The default index used to dismiss the dialog
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.MessageVisualizerOptions.CancelCommandIndex">
            <summary>
            The cancel index used to dismiss the dialog
            </summary>
        </member>
        <member name="T:JulMar.Core.Internal.DefaultExportAttribute">
            <summary>
            This represents a default implementation of an export - it will only
            be used if there is no other export of the same type / contract name.
            </summary>
        </member>
        <member name="M:JulMar.Core.Internal.DefaultExportAttribute.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="contractType">Export type</param>
        </member>
        <member name="M:JulMar.Core.Internal.DefaultExportAttribute.#ctor(System.String,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="contractName">Contract name</param>
            <param name="contractType">Export type</param>
        </member>
        <member name="T:JulMar.Core.Internal.DefaultExportDescriptorProvider">
            <summary>
            Default export provider
            </summary>
        </member>
        <member name="T:JulMar.Core.MessageMediatorTargetAttribute">
            <summary>
            This attribute allows a method to be targeted as a recipient for a message.
            It requires that the Type is registered with the MessageMediator through the
            <seealso cref="M:JulMar.Core.Services.MessageMediator.Register(System.Object)"/> method
            </summary>
            <example>
            <![CDATA[
            [MessageMediatorTarget("DoBackgroundCheck")]
            void OnBackgroundCheck(object parameter) { ... }
            
            [MessageMediatorTarget(typeof(SomeDataClass))]
            void OnNotifyDataRecieved(SomeDataClass parameter) { ... }
            ...
            
            mediator.SendMessage("DoBackgroundCheck", new CheckParameters());
            ...
            mediator.SendMessage(new SomeDataClass(...));
            
            ]]>
            </example>
        </member>
        <member name="M:JulMar.Core.MessageMediatorTargetAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:JulMar.Core.MessageMediatorTargetAttribute.#ctor(System.String)">
            <summary>
            Constructor that takes a message key
            </summary>
            <param name="messageKey">Message Key</param>
        </member>
        <member name="P:JulMar.Core.MessageMediatorTargetAttribute.MessageKey">
            <summary>
            Message key
            </summary>
        </member>
        <member name="T:JulMar.Windows.Mvvm.AsyncDelegateCommand">
            <summary>
            An asynchronous version of the DelegatingCommand
            </summary>
        </member>
        <member name="M:JulMar.Windows.Mvvm.AsyncDelegateCommand.#ctor(System.Action)">
            <summary>
            Constructor
            </summary>
            <param name="action">The action to be executed</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.AsyncDelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Constructor for no-parameter ICommand
            </summary>
            <param name="action">The action to be executed</param>
            <param name="canExecute">Will be used to determine if the action can be executed</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.AsyncDelegateCommand.#ctor(System.Action,System.Func{System.Boolean},System.Action)">
            <summary>
            Constructor for no-parameter ICommand
            </summary>
            <param name="action">The action to be executed</param>
            <param name="canExecute">Will be used to determine if the action can be executed</param>
            <param name="completedCallback">Will be invoked when the action is completed</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.AsyncDelegateCommand.#ctor(System.Action,System.Func{System.Boolean},System.Action,System.Action{System.Exception})">
            <summary>
            Constructor for no-parameter ICommand
            </summary>
            <param name="action">The action to be executed</param>
            <param name="canExecute">Will be used to determine if the action can be executed</param>
            <param name="completedCallback">Will be invoked when the action is completed</param>
            <param name="errorCallback">Will be invoked if the action throws an error</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.AsyncDelegateCommand.#ctor(System.Action{System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="action">The action to be executed</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.AsyncDelegateCommand.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            Constructor for no-parameter ICommand
            </summary>
            <param name="action">The action to be executed</param>
            <param name="canExecute">Will be used to determine if the action can be executed</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.AsyncDelegateCommand.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean},System.Action)">
            <summary>
            Constructor for no-parameter ICommand
            </summary>
            <param name="action">The action to be executed</param>
            <param name="canExecute">Will be used to determine if the action can be executed</param>
            <param name="completedCallback">Will be invoked when the action is completed</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.AsyncDelegateCommand.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean},System.Action,System.Action{System.Exception})">
            <summary>
            Constructor for object-based parameter ICommand
            </summary>
            <param name="action">The action to be executed</param>
            <param name="canExecute">Will be used to determine if the action can be executed</param>
            <param name="completedCallback">Will be invoked when the action is completed</param>
            <param name="errorCallback">Will be invoked if the action throws an error</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.AsyncDelegateCommand.RaiseCanExecuteChanged">
            <summary>
            This method can be used to raise the CanExecuteChanged handler.
            This will force WinRT to re-query the status of this command directly.
            This is not necessary if you use the AutoCanExecuteRequery feature.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Mvvm.AsyncDelegateCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.AsyncDelegateCommand.Execute(System.Object)">
            <summary>
            Invoke the command
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="E:JulMar.Windows.Mvvm.AsyncDelegateCommand.CanExecuteChanged">
            <summary>
            Event that is raised when the current state for our command has changed.
            </summary>
        </member>
        <member name="T:JulMar.Windows.Mvvm.AsyncDelegateCommand`1">
            <summary>
            An asynchronous version of the DelegatingCommand
            </summary>
        </member>
        <member name="M:JulMar.Windows.Mvvm.AsyncDelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
            Constructor
            </summary>
            <param name="action">The action to be executed</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.AsyncDelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="action">The action to be executed</param>
            <param name="canExecute">Will be used to determine if the action can be executed</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.AsyncDelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean},System.Action)">
            <summary>
            Constructor
            </summary>
            <param name="action">The action to be executed</param>
            <param name="canExecute">Will be used to determine if the action can be executed</param>
            <param name="completedCallback">Will be invoked when the action is completed</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.AsyncDelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean},System.Action,System.Action{System.Exception})">
            <summary>
            Constructor 
            </summary>
            <param name="action">The action to be executed</param>
            <param name="canExecute">Will be used to determine if the action can be executed</param>
            <param name="completedCallback">Will be invoked when the action is completed</param>
            <param name="errorCallback">Will be invoked if the action throws an error</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.AsyncDelegateCommand`1.RaiseCanExecuteChanged">
            <summary>
            This method can be used to raise the CanExecuteChanged handler.
            This will force WinRT to re-query the status of this command directly.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Mvvm.AsyncDelegateCommand`1.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.AsyncDelegateCommand`1.Execute(System.Object)">
            <summary>
            Invoke the command
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="E:JulMar.Windows.Mvvm.AsyncDelegateCommand`1.CanExecuteChanged">
            <summary>
            Event that is raised when the current state for our command has changed.
            Note that this is an instance event - unlike the CommandManager.RequerySuggested event
            and as such we don't need to manage weak references here.
            </summary>
        </member>
        <member name="T:JulMar.Windows.Mvvm.DelegateCommand">
            <summary>
            A simple command to delegate forwarding class
            </summary>
        </member>
        <member name="M:JulMar.Windows.Mvvm.DelegateCommand.#ctor(System.Action{System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="command">Function mapped to ICommand.Execute</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.DelegateCommand.#ctor(System.Action)">
            <summary>
            Constructor
            </summary>
            <param name="command">Function mapped to ICommand.Execute</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="command">Function mapped to ICommand.Execute</param>
            <param name="test">Function mapped to ICommand.CanExecute</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.DelegateCommand.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="command">Function mapped to ICommand.Execute</param>
            <param name="test">Function mapped to ICommand.CanExecute</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.DelegateCommand.RaiseCanExecuteChanged">
            <summary>
            This method can be used to raise the CanExecuteChanged handler.
            This will force WinRT to re-query the status of this command directly.
            This is not necessary if you use the AutoCanExecuteRequery feature.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Mvvm.DelegateCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.DelegateCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="E:JulMar.Windows.Mvvm.DelegateCommand.CanExecuteChanged">
            <summary>
            Event that is raised when the current state for our command has changed.
            Note that this is an instance event - unlike the CommandManager.RequerySuggested event
            and as such we don't need to manage weak references here.
            </summary>
        </member>
        <member name="T:JulMar.Windows.Mvvm.DelegateCommand`1">
            <summary>
            A simple command to delegate forwarding class which auto-casts the parameter
            passed to a given type.
            </summary>
            <typeparam name="T">Parameter type</typeparam>
        </member>
        <member name="M:JulMar.Windows.Mvvm.DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
            Constructor
            </summary>
            <param name="command">Function mapped to ICommand.Execute</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="command">Function mapped to ICommand.Execute</param>
            <param name="test">Function mapped to ICommand.CanExecute</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.DelegateCommand`1.RaiseCanExecuteChanged">
            <summary>
            This method can be used to raise the CanExecuteChanged handler.
            This will force WinRT to re-query the status of this command directly.
            This is not necessary if you use the AutoCanExecuteRequery feature.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Mvvm.DelegateCommand`1.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.DelegateCommand`1.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="E:JulMar.Windows.Mvvm.DelegateCommand`1.CanExecuteChanged">
            <summary>
            Event that is raised when the current state for our command has changed.
            Note that this is an instance event - unlike the CommandManager.RequerySuggested event
            and as such we don't need to manage weak references here.
            </summary>
        </member>
        <member name="T:JulMar.Windows.Interfaces.IViewModelLocator">
            <summary>
            ViewModel locator interfaces
            </summary>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IViewModelLocator.Locate(System.String)">
            <summary>
            Finds the VM based on the key.
            </summary>
            <param name="key">Key to search for</param>
            <returns>Located view model or null</returns>
        </member>
        <member name="M:JulMar.Windows.Interfaces.IViewModelLocator.TryLocate(System.String,System.Object@)">
            <summary>
            Finds the VM based on the key.
            </summary>
            <param name="key">Key to search for</param>
            <param name="returnValue">Located view model or null</param>
            <returns>true/false if VM was found</returns>
        </member>
        <member name="P:JulMar.Windows.Interfaces.IViewModelLocator.Item(System.String)">
            <summary>
            Operator to retrieve view models.
            </summary>
            <returns>Read-only version of view model collection</returns>
        </member>
        <member name="T:JulMar.Windows.Mvvm.ExportViewModelAttribute">
            <summary>
            This attribute is used to decorate all "auto-located" services.
            MEF is used to locate and bind each service with this attribute decoration.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Mvvm.ExportViewModelAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="key">Key used to lookup ViewModel</param>
        </member>
        <member name="P:JulMar.Windows.Mvvm.ExportViewModelAttribute.Key">
            <summary>
            Key used to export the View/ViewModel
            </summary>
        </member>
        <member name="T:JulMar.Windows.Mvvm.SimpleViewModel">
            <summary>
            This class implements the simplest view model -- one that implements INPC.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Mvvm.SimpleViewModel.#cctor">
            <summary>
            Static constructor - assume this is always executed on the primary thread.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Mvvm.SimpleViewModel.RaiseAllPropertiesChanged">
            <summary>
            This can be used to indicate that all property values have changed.
            </summary>
        </member>
        <member name="M:JulMar.Windows.Mvvm.SimpleViewModel.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            This raises the INotifyPropertyChanged.PropertyChanged event to indicate
            a specific property has changed value. This version provides a compile-time safe
            way to indicate the property through the use of an expression tree / lambda.
            Be aware that for high-volume changes this version might be much slower than
            the above "magic-string" version due to the creation of an expression and runtime lookup.
            </summary>
            <example>
            <![CDATA[
               public string Name
               {
                  get { return _name; }
                  set
                  {
                      _name = value;
                      RaisePropertyChanged(() => Name);
                  }
               }
            ]]>
            </example>
            <typeparam name="T">Type where it is being raised</typeparam>
            <param name="propExpr">Property</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.SimpleViewModel.RaisePropertyChanged(System.String)">
            <summary>
            This raises the INotifyPropertyChanged.PropertyChanged event to indicate
            a specific property has changed value.
            </summary>
            <param name="propertyName">Primary property</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.SimpleViewModel.SetPropertyValue``1(``0@,``0,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            This is used to set a specific value for a property.
            </summary>
            <typeparam name="T">Type to set</typeparam>
            <param name="storageField">Storage field</param>
            <param name="newValue">New value</param>
            <param name="propExpr">Property expression</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.SimpleViewModel.SetPropertyValue``1(``0@,``0,System.String)">
            <summary>
            This is used to set a specific value for a property.
            </summary>
            <typeparam name="T">Type to set</typeparam>
            <param name="storageField">Storage field</param>
            <param name="newValue">New value</param>
            <param name="propertyName">Property Name</param>
        </member>
        <member name="E:JulMar.Windows.Mvvm.SimpleViewModel.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:JulMar.Windows.Mvvm.SimpleViewModel.InDesignMode">
            <summary>
            True/False whether we are currently in design mode
            </summary>
        </member>
        <member name="T:JulMar.Windows.Mvvm.ViewModelLocatorService">
            <summary>
            This class holds ViewModels that are registered with the ExportViewModelAttribute.
            </summary>
        </member>
        <member name="F:JulMar.Windows.Mvvm.ViewModelLocatorService.MefLocatorKey">
            <summary>
            Key used to bind exports together
            </summary>
        </member>
        <member name="M:JulMar.Windows.Mvvm.ViewModelLocatorService.Locate(System.String)">
            <summary>
            Finds the VM based on the key.
            </summary>
            <param name="key">Key to search for</param>
            <returns>Located view model or null</returns>
        </member>
        <member name="M:JulMar.Windows.Mvvm.ViewModelLocatorService.TryLocate(System.String,System.Object@)">
            <summary>
            Finds the VM based on the key.
            </summary>
            <param name="key">Key to search for</param>
            <param name="returnValue">Located view model or null</param>
            <returns>true/false if VM was found</returns>
        </member>
        <member name="M:JulMar.Windows.Mvvm.ViewModelLocatorService.GatherViewModelData">
            <summary>
            This method uses an internal object to gather the list of ViewModels based
            on the ExportViewModel attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="P:JulMar.Windows.Mvvm.ViewModelLocatorService.Item(System.String)">
            <summary>
            Operator to retrieve view models.
            </summary>
            <returns>Read-only version of view model collection</returns>
        </member>
        <member name="T:JulMar.Windows.Mvvm.ViewModelMetadata">
            <summary>
            Class used to populate metadata used to identify view models
            </summary>
        </member>
        <member name="P:JulMar.Windows.Mvvm.ViewModelMetadata.Key">
            <summary>
            Key used to export the ViewModel.  We only allow one export for VMs.
            </summary>
        </member>
        <member name="T:JulMar.Windows.Mvvm.ViewModelData">
            <summary>
            Class used to locate view models but keep property hidden
            </summary>
        </member>
        <member name="P:JulMar.Windows.Mvvm.ViewModelData.LocatedViewModels">
            <summary>
            Located view models
            </summary>
        </member>
        <member name="T:JulMar.Windows.Mvvm.ViewModelLocator">
            <summary>
            ViewModel locator resource lookup.  This provides markup support for the 
            IViewModelLocator service.  It can be used two different ways:
              a) By placing an instance of the ViewModelLocator into Application.Resources in XAML and
                 then data binding to the resource with the [ViewModelKey] path (array indexer).
              b) Through the ViewModelLocator.Key attached property which sets the 
                 DataContext of the element to which it is attached
            </summary>
        </member>
        <member name="F:JulMar.Windows.Mvvm.ViewModelLocator.KeyProperty">
            <summary>
            ViewModel key
            </summary>
        </member>
        <member name="M:JulMar.Windows.Mvvm.ViewModelLocator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Windows.Mvvm.ViewModelLocator.OnViewModelKeyChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the ViewModelKey property is changed on an UI element.
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.ViewModelLocator.GetKey(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Get the ViewModelKey property value
            </summary>
            <param name="fe"></param>
            <returns></returns>
        </member>
        <member name="M:JulMar.Windows.Mvvm.ViewModelLocator.SetKey(Windows.UI.Xaml.FrameworkElement,System.String)">
            <summary>
            Sets the ViewModelKey property value.
            </summary>
            <param name="fe"></param>
            <param name="key"></param>
        </member>
        <member name="P:JulMar.Windows.Mvvm.ViewModelLocator.ViewModels">
            <summary>
            ViewModel dictionary - can be used as indexer operator in Binding expressions.
            </summary>
        </member>
        <member name="T:JulMar.Core.Services.ServiceLocatorResource">
            <summary>
            This class allows an injected service location into resources for
            XAML based binding lookups
            </summary>
            <example>
            <![CDATA[
              <Page.Resources>
                 <ServiceLocatorResource Type="ViewModelLocator" x:Key="vmLocator" />
              </Page.Resources>
            ]]>
            </example>
        </member>
        <member name="F:JulMar.Core.Services.ServiceLocatorResource.TypeProperty">
            <summary>
            Backing storage for the type
            </summary>
        </member>
        <member name="M:JulMar.Core.Services.ServiceLocatorResource.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Core.Services.ServiceLocatorResource.#ctor(System.Type)">
            <summary>
            Code constructor
            </summary>
            <param name="type">Type to lookup</param>
        </member>
        <member name="P:JulMar.Core.Services.ServiceLocatorResource.Type">
            <summary>
            Type to lookup
            </summary>
        </member>
        <member name="P:JulMar.Core.Services.ServiceLocatorResource.Instance">
            <summary>
            Located Instance
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.BadgeContent.IBadgeNotificationContent">
            <summary>
            Base badge notification content interface.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.INotificationContent">
            <summary>
            Base notification content interface to retrieve notification Xml as a string.
            </summary>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.INotificationContent.GetContent">
            <summary>
            Retrieves the notification Xml content as a string.
            </summary>
            <returns>The notification Xml content as a string.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.INotificationContent.GetXml">
            <summary>
            Retrieves the notification Xml content as a WinRT Xml document.
            </summary>
            <returns>The notification Xml content as a WinRT Xml document.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.BadgeContent.IBadgeNotificationContent.CreateNotification">
            <summary>
            Creates a WinRT BadgeNotification object based on the content.
            </summary>
            <returns>A WinRT BadgeNotification object based on the content.</returns>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.BadgeContent.GlyphValue">
            <summary>
            The types of glyphs that can be placed on a badge.
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.BadgeContent.GlyphValue.None">
            <summary>
            No glyph.  If there is a numeric badge, or a glyph currently on the badge,
            it will be removed.
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.BadgeContent.GlyphValue.Activity">
            <summary>
            A glyph representing application activity.
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.BadgeContent.GlyphValue.Alert">
            <summary>
            A glyph representing an alert.
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.BadgeContent.GlyphValue.Available">
            <summary>
            A glyph representing availability status.
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.BadgeContent.GlyphValue.Away">
            <summary>
            A glyph representing away status
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.BadgeContent.GlyphValue.Busy">
            <summary>
            A glyph representing busy status.
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.BadgeContent.GlyphValue.NewMessage">
            <summary>
            A glyph representing that a new message is available.
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.BadgeContent.GlyphValue.Paused">
            <summary>
            A glyph representing that media is paused.
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.BadgeContent.GlyphValue.Playing">
            <summary>
            A glyph representing that media is playing.
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.BadgeContent.GlyphValue.Unavailable">
            <summary>
            A glyph representing unavailable status.
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.BadgeContent.GlyphValue.Error">
            <summary>
            A glyph representing an error.
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.BadgeContent.GlyphValue.Attention">
            <summary>
            A glyph representing attention status.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.BadgeContent.BadgeGlyphNotificationContent">
            <summary>
            Notification content object to display a glyph on a tile's badge.
            </summary>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.BadgeContent.BadgeGlyphNotificationContent.#ctor">
            <summary>
            Default constructor to create a glyph badge content object.
            </summary>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.BadgeContent.BadgeGlyphNotificationContent.#ctor(JulMar.Windows.UI.Notifications.BadgeContent.GlyphValue)">
            <summary>
            Constructor to create a glyph badge content object with a glyph.
            </summary>
            <param name="glyph">The glyph to be displayed on the badge.</param>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.BadgeContent.BadgeGlyphNotificationContent.GetContent">
            <summary>
            Retrieves the notification Xml content as a string.
            </summary>
            <returns>The notification Xml content as a string.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.BadgeContent.BadgeGlyphNotificationContent.ToString">
            <summary>
            Retrieves the notification Xml content as a string.
            </summary>
            <returns>The notification Xml content as a string.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.BadgeContent.BadgeGlyphNotificationContent.GetXml">
            <summary>
            Retrieves the notification Xml content as a WinRT Xml document.
            </summary>
            <returns>The notification Xml content as a WinRT Xml document.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.BadgeContent.BadgeGlyphNotificationContent.CreateNotification">
            <summary>
            Creates a WinRT BadgeNotification object based on the content.
            </summary>
            <returns>A WinRT BadgeNotification object based on the content.</returns>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.BadgeContent.BadgeGlyphNotificationContent.Glyph">
            <summary>
            The glyph to be displayed on the badge.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.BadgeContent.BadgeNumericNotificationContent">
            <summary>
            Notification content object to display a number on a tile's badge.
            </summary>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.BadgeContent.BadgeNumericNotificationContent.#ctor">
            <summary>
            Default constructor to create a numeric badge content object.
            </summary>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.BadgeContent.BadgeNumericNotificationContent.#ctor(System.UInt32)">
            <summary>
            Constructor to create a numeric badge content object with a number.
            </summary>
            <param name="number">
            The number that will appear on the badge.  If the number is 0, the badge
            will be removed.  The largest value that will appear on the badge is 99.
            Numbers greater than 99 are allowed, but will be displayed as "99+".
            </param>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.BadgeContent.BadgeNumericNotificationContent.GetContent">
            <summary>
            Retrieves the notification Xml content as a string.
            </summary>
            <returns>The notification Xml content as a string.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.BadgeContent.BadgeNumericNotificationContent.ToString">
            <summary>
            Retrieves the notification Xml content as a string.
            </summary>
            <returns>The notification Xml content as a string.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.BadgeContent.BadgeNumericNotificationContent.GetXml">
            <summary>
            Retrieves the notification Xml content as a WinRT Xml document.
            </summary>
            <returns>The notification Xml content as a WinRT Xml document.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.BadgeContent.BadgeNumericNotificationContent.CreateNotification">
            <summary>
            Creates a WinRT BadgeNotification object based on the content.
            </summary>
            <returns>A WinRT BadgeNotification object based on the content.</returns>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.BadgeContent.BadgeNumericNotificationContent.Number">
            <summary>
            The number that will appear on the badge.  If the number is 0, the badge
            will be removed.  The largest value that will appear on the badge is 99.
            Numbers greater than 99 are allowed, but will be displayed as "99+".
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.NotificationContentValidationException">
            <summary>
            Exception returned when invalid notification content is provided.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.INotificationContentImage">
            <summary>
            A type contained by the tile and toast notification content objects that
            represents an image in a template.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.INotificationContentImage.Src">
            <summary>
            The location of the image.  Relative image paths use the BaseUri provided in the containing
            notification object.  If no BaseUri is provided, paths are relative to ms-appx:///.
            Only png and jpg images are supported.  Images must be 1024x1024 pixels or less, and smaller than
            200 kB in size.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.INotificationContentImage.Alt">
            <summary>
            Alt text that describes the image.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.INotificationContentImage.AddImageQuery">
            <summary>
            Controls if query strings that denote the client configuration of contrast, scale, and language setting should be appended to the Src
            If true, Windows will append query strings onto the Src
            If false, Windows will not append query strings onto the Src
            Query string details:
            Parameter: ms-contrast
                Values: standard, black, white
            Parameter: ms-scale
                Values: 80, 100, 140, 180
            Parameter: ms-lang
                Values: The BCP 47 language tag set in the notification xml, or if omitted, the current preferred language of the user
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.NotificationContentImage">
            <summary>
            Internal class
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.INotificationContentText">
            <summary>
            A type contained by the tile and toast notification content objects that
            represents a text field in the template.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.INotificationContentText.Text">
            <summary>
            The text value that will be shown in the text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.INotificationContentText.Lang">
            <summary>
            The language of the text field.  This property overrides the language provided in the
            containing notification object.  The language should be specified using the
            abbreviated language code as defined by BCP 47.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.NotificationContentText">
            <summary>
            Internal class
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.NotificationBase">
            <summary>
            Base class for the notification content creation helper classes.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.NotificationBase.Images">
            <summary>
            Retrieves the list of images that can be manipulated on the notification content.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.NotificationBase.TextFields">
            <summary>
            Retrieves the list of text fields that can be manipulated on the notification content.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.NotificationBase.BaseUri">
            <summary>
            The base Uri path that should be used for all image references in the notification.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.TileBranding">
            <summary>
            The types of behavior that can be used for application branding when
            tile notification content is displayed on the tile.
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.TileContent.TileBranding.None">
            <summary>
            No application branding will be displayed on the tile content.
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.TileContent.TileBranding.Logo">
            <summary>
            The application logo will be displayed with the tile content.
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.TileContent.TileBranding.Name">
            <summary>
            The application name will be displayed with the tile content.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileSquareBlock">
            <summary>
            A square tile template that displays two text captions.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ISquareTileNotificationContent">
            <summary>
            Base square tile notification content interface.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileNotificationContent">
            <summary>
            Base tile notification content interface.
            </summary>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.ITileNotificationContent.CreateNotification">
            <summary>
            Creates a WinRT TileNotification object based on the content.
            </summary>
            <returns>The WinRT TileNotification object</returns>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileNotificationContent.StrictValidation">
            <summary>
            Whether strict validation should be applied when the Xml or notification object is created,
            and when some of the properties are assigned.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileNotificationContent.Lang">
            <summary>
            The language of the content being displayed.  The language should be specified using the
            abbreviated language code as defined by BCP 47.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileNotificationContent.BaseUri">
            <summary>
            The BaseUri that should be used for image locations.  Relative image locations use this
            field as their base Uri.  The BaseUri must begin with http://, https://, ms-appx:///, or 
            ms-appdata:///local/.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileNotificationContent.Branding">
            <summary>
            Determines the application branding when tile notification content is displayed on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileNotificationContent.AddImageQuery">
            <summary>
            Controls if query strings that denote the client configuration of contrast, scale, and language setting should be appended to the Src
            If true, Windows will append query strings onto images that exist in this template
            If false (the default), Windows will not append query strings onto images that exist in this template
            Query string details:
            Parameter: ms-contrast
                Values: standard, black, white
            Parameter: ms-scale
                Values: 80, 100, 140, 180
            Parameter: ms-lang
                Values: The BCP 47 language tag set in the notification xml, or if omitted, the current preferred language of the user
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquareBlock.TextBlock">
            <summary>
            A large block text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquareBlock.TextSubBlock">
            <summary>
            The description under the large block text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileSquareImage">
            <summary>
            A square tile template that displays an image.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquareImage.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileSquarePeekImageAndText01">
            <summary>
            A square tile template that displays an image, then transitions to show
            four text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquarePeekImageAndText01.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquarePeekImageAndText01.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquarePeekImageAndText01.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquarePeekImageAndText01.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquarePeekImageAndText01.TextBody3">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileSquarePeekImageAndText02">
            <summary>
            A square tile template that displays an image, then transitions to show
            two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquarePeekImageAndText02.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquarePeekImageAndText02.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquarePeekImageAndText02.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileSquarePeekImageAndText03">
            <summary>
            A square tile template that displays an image, then transitions to show
            four text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquarePeekImageAndText03.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquarePeekImageAndText03.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquarePeekImageAndText03.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquarePeekImageAndText03.TextBody3">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquarePeekImageAndText03.TextBody4">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileSquarePeekImageAndText04">
            <summary>
            A square tile template that displays an image, then transitions to 
            show a text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquarePeekImageAndText04.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquarePeekImageAndText04.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileSquareText01">
            <summary>
            A square tile template that displays four text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquareText01.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquareText01.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquareText01.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquareText01.TextBody3">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileSquareText02">
            <summary>
            A square tile template that displays two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquareText02.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquareText02.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileSquareText03">
            <summary>
            A square tile template that displays four text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquareText03.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquareText03.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquareText03.TextBody3">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquareText03.TextBody4">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileSquareText04">
            <summary>
            A square tile template that displays a text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileSquareText04.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWideBlockAndText01">
            <summary>
            A square tile template that displays six text fields.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.IWideTileNotificationContent">
            <summary>
            Base wide tile notification content interface.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.IWideTileNotificationContent.SquareContent">
            <summary>
            Corresponding square tile notification content should be a part of every wide tile notification.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.IWideTileNotificationContent.RequireSquareContent">
            <summary>
            Whether square tile notification content needs to be added to pass
            validation.  Square content is required by default.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideBlockAndText01.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideBlockAndText01.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideBlockAndText01.TextBody3">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideBlockAndText01.TextBody4">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideBlockAndText01.TextBlock">
            <summary>
            A large block text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideBlockAndText01.TextSubBlock">
            <summary>
            The description under the large block text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWideBlockAndText02">
            <summary>
            A square tile template that displays three text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideBlockAndText02.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideBlockAndText02.TextBlock">
            <summary>
            A large block text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideBlockAndText02.TextSubBlock">
            <summary>
            The description under the large block text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWideImage">
            <summary>
            A wide tile template that displays an image.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideImage.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWideImageAndText01">
            <summary>
            A wide tile template that displays an image and a text caption.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideImageAndText01.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideImageAndText01.TextCaptionWrap">
            <summary>
            A caption for the image.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWideImageAndText02">
            <summary>
            A wide tile template that displays an image and two text captions.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideImageAndText02.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideImageAndText02.TextCaption1">
            <summary>
            The first caption for the image.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideImageAndText02.TextCaption2">
            <summary>
            The second caption for the image.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWideImageCollection">
            <summary>
            A wide tile template that displays five images - one main image,
            and four square images in a grid.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideImageCollection.ImageMain">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideImageCollection.ImageSmallColumn1Row1">
            <summary>
            A small square image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideImageCollection.ImageSmallColumn2Row1">
            <summary>
            A small square image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideImageCollection.ImageSmallColumn1Row2">
            <summary>
            A small square image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideImageCollection.ImageSmallColumn2Row2">
            <summary>
            A small square image on the tile.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage01">
            <summary>
            A wide tile template that displays an image, then transitions to show
            two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage01.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage01.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage01.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage02">
            <summary>
            A wide tile template that displays an image, then transitions to show
            five text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage02.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage02.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage02.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage02.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage02.TextBody3">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage02.TextBody4">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage03">
            <summary>
            A wide tile template that displays an image, then transitions to show
            a text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage03.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage03.TextHeadingWrap">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage04">
            <summary>
            A wide tile template that displays an image, then transitions to show
            a text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage04.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage04.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage05">
            <summary>
            A wide tile template that displays an image, then transitions to show
            another image and two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage05.ImageMain">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage05.ImageSecondary">
            <summary>
            The secondary image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage05.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage05.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage06">
            <summary>
            A wide tile template that displays an image, then transitions to show
            another image and a text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage06.ImageMain">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage06.ImageSecondary">
            <summary>
            The secondary image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImage06.TextHeadingWrap">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageAndText01">
            <summary>
            A wide tile template that displays an image and a portion of a text field,
            then transitions to show all of the text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageAndText01.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageAndText01.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageAndText02">
            <summary>
            A wide tile template that displays an image and a text field,
            then transitions to show the text field and four other text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageAndText02.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageAndText02.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageAndText02.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageAndText02.TextBody3">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageAndText02.TextBody4">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageAndText02.TextBody5">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageCollection01">
            <summary>
            A wide tile template that displays five images - one main image,
            and four square images in a grid, then transitions to show two
            text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageCollection01.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageCollection01.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageCollection02">
            <summary>
            A wide tile template that displays five images - one main image,
            and four square images in a grid, then transitions to show five
            text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageCollection02.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageCollection02.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageCollection02.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageCollection02.TextBody3">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageCollection02.TextBody4">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageCollection03">
            <summary>
            A wide tile template that displays five images - one main image,
            and four square images in a grid, then transitions to show a
            text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageCollection03.TextHeadingWrap">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageCollection04">
            <summary>
            A wide tile template that displays five images - one main image,
            and four square images in a grid, then transitions to show a
            text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageCollection04.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageCollection05">
            <summary>
            A wide tile template that displays five images - one main image,
            and four square images in a grid, then transitions to show an image
            and two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageCollection05.ImageSecondary">
            <summary>
            The secondary image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageCollection05.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageCollection05.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageCollection06">
            <summary>
            A wide tile template that displays five images - one main image,
            and four square images in a grid, then transitions to show an image
            and a text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageCollection06.ImageSecondary">
            <summary>
            The secondary image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWidePeekImageCollection06.TextHeadingWrap">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWideSmallImageAndText01">
            <summary>
            A wide tile template that displays an image and a text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideSmallImageAndText01.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideSmallImageAndText01.TextHeadingWrap">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWideSmallImageAndText02">
            <summary>
            A wide tile template that displays an image and 5 text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideSmallImageAndText02.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideSmallImageAndText02.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideSmallImageAndText02.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideSmallImageAndText02.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideSmallImageAndText02.TextBody3">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideSmallImageAndText02.TextBody4">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWideSmallImageAndText03">
            <summary>
            A wide tile template that displays an image and a text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideSmallImageAndText03.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideSmallImageAndText03.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWideSmallImageAndText04">
            <summary>
            A wide tile template that displays an image and two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideSmallImageAndText04.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideSmallImageAndText04.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideSmallImageAndText04.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWideSmallImageAndText05">
            <summary>
            A wide tile template that displays a poster image and two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideSmallImageAndText05.Image">
            <summary>
            The main image on the tile.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideSmallImageAndText05.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideSmallImageAndText05.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWideText01">
            <summary>
            A wide tile template that displays five text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText01.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText01.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText01.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText01.TextBody3">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText01.TextBody4">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWideText02">
            <summary>
            A wide tile template that displays nine text fields - a heading and two columns
            of four text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText02.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText02.TextColumn1Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText02.TextColumn2Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText02.TextColumn1Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText02.TextColumn2Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText02.TextColumn1Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText02.TextColumn2Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText02.TextColumn1Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText02.TextColumn2Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWideText03">
            <summary>
            A wide tile template that displays a text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText03.TextHeadingWrap">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWideText04">
            <summary>
            A wide tile template that displays a text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText04.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWideText05">
            <summary>
            A wide tile template that displays five text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText05.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText05.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText05.TextBody3">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText05.TextBody4">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText05.TextBody5">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWideText06">
            <summary>
            A wide tile template that displays ten text fields - two columns
            of five text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText06.TextColumn1Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText06.TextColumn2Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText06.TextColumn1Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText06.TextColumn2Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText06.TextColumn1Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText06.TextColumn2Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText06.TextColumn1Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText06.TextColumn2Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText06.TextColumn1Row5">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText06.TextColumn2Row5">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWideText07">
            <summary>
            A wide tile template that displays nine text fields - a heading and two columns
            of four text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText07.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText07.TextShortColumn1Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText07.TextColumn2Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText07.TextShortColumn1Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText07.TextColumn2Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText07.TextShortColumn1Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText07.TextColumn2Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText07.TextShortColumn1Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText07.TextColumn2Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWideText08">
            <summary>
            A wide tile template that displays ten text fields - two columns
            of five text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText08.TextShortColumn1Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText08.TextShortColumn1Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText08.TextShortColumn1Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText08.TextShortColumn1Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText08.TextShortColumn1Row5">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText08.TextColumn2Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText08.TextColumn2Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText08.TextColumn2Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText08.TextColumn2Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText08.TextColumn2Row5">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWideText09">
            <summary>
            A wide tile template that displays two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText09.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText09.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWideText10">
            <summary>
            A wide tile template that displays nine text fields - a heading and two columns
            of four text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText10.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText10.TextPrefixColumn1Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText10.TextColumn2Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText10.TextPrefixColumn1Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText10.TextColumn2Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText10.TextPrefixColumn1Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText10.TextColumn2Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText10.TextPrefixColumn1Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText10.TextColumn2Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.ITileWideText11">
            <summary>
            A wide tile template that displays ten text fields - two columns
            of five text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText11.TextPrefixColumn1Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText11.TextColumn2Row1">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText11.TextPrefixColumn1Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText11.TextColumn2Row2">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText11.TextPrefixColumn1Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText11.TextColumn2Row3">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText11.TextPrefixColumn1Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText11.TextColumn2Row4">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText11.TextPrefixColumn1Row5">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.TileContent.ITileWideText11.TextColumn2Row5">
            <summary>
            A text field displayed in a column and row.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory">
            <summary>
            A factory which creates tile content objects for all of the toast template types.
            </summary>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileSquareBlock">
            <summary>
            Creates a tile content object for the TileSquareBlock template.
            </summary>
            <returns>A tile content object for the TileSquareBlock template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileSquareImage">
            <summary>
            Creates a tile content object for the TileSquareImage template.
            </summary>
            <returns>A tile content object for the TileSquareImage template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileSquarePeekImageAndText01">
            <summary>
            Creates a tile content object for the TileSquarePeekImageAndText01 template.
            </summary>
            <returns>A tile content object for the TileSquarePeekImageAndText01 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileSquarePeekImageAndText02">
            <summary>
            Creates a tile content object for the TileSquarePeekImageAndText02 template.
            </summary>
            <returns>A tile content object for the TileSquarePeekImageAndText02 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileSquarePeekImageAndText03">
            <summary>
            Creates a tile content object for the TileSquarePeekImageAndText03 template.
            </summary>
            <returns>A tile content object for the TileSquarePeekImageAndText03 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileSquarePeekImageAndText04">
            <summary>
            Creates a tile content object for the TileSquarePeekImageAndText04 template.
            </summary>
            <returns>A tile content object for the TileSquarePeekImageAndText04 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileSquareText01">
            <summary>
            Creates a tile content object for the TileSquareText01 template.
            </summary>
            <returns>A tile content object for the TileSquareText01 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileSquareText02">
            <summary>
            Creates a tile content object for the TileSquareText02 template.
            </summary>
            <returns>A tile content object for the TileSquareText02 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileSquareText03">
            <summary>
            Creates a tile content object for the TileSquareText03 template.
            </summary>
            <returns>A tile content object for the TileSquareText03 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileSquareText04">
            <summary>
            Creates a tile content object for the TileSquareText04 template.
            </summary>
            <returns>A tile content object for the TileSquareText04 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWideBlockAndText01">
            <summary>
            Creates a tile content object for the TileWideBlockAndText01 template.
            </summary>
            <returns>A tile content object for the TileWideBlockAndText01 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWideBlockAndText02">
            <summary>
            Creates a tile content object for the TileWideBlockAndText02 template.
            </summary>
            <returns>A tile content object for the TileWideBlockAndText02 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWideImage">
            <summary>
            Creates a tile content object for the TileWideImage template.
            </summary>
            <returns>A tile content object for the TileWideImage template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWideImageAndText01">
            <summary>
            Creates a tile content object for the TileWideImageAndText01 template.
            </summary>
            <returns>A tile content object for the TileWideImageAndText01 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWideImageAndText02">
            <summary>
            Creates a tile content object for the TileWideImageAndText02 template.
            </summary>
            <returns>A tile content object for the TileWideImageAndText02 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWideImageCollection">
            <summary>
            Creates a tile content object for the TileWideImageCollection template.
            </summary>
            <returns>A tile content object for the TileWideImageCollection template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImage01">
            <summary>
            Creates a tile content object for the TileWidePeekImage01 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImage01 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImage02">
            <summary>
            Creates a tile content object for the TileWidePeekImage02 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImage02 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImage03">
            <summary>
            Creates a tile content object for the TileWidePeekImage03 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImage03 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImage04">
            <summary>
            Creates a tile content object for the TileWidePeekImage04 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImage04 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImage05">
            <summary>
            Creates a tile content object for the TileWidePeekImage05 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImage05 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImage06">
            <summary>
            Creates a tile content object for the TileWidePeekImage06 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImage06 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImageAndText01">
            <summary>
            Creates a tile content object for the TileWidePeekImageAndText01 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImageAndText01 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImageAndText02">
            <summary>
            Creates a tile content object for the TileWidePeekImageAndText02 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImageAndText02 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImageCollection01">
            <summary>
            Creates a tile content object for the TileWidePeekImageCollection01 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImageCollection01 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImageCollection02">
            <summary>
            Creates a tile content object for the TileWidePeekImageCollection02 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImageCollection02 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImageCollection03">
            <summary>
            Creates a tile content object for the TileWidePeekImageCollection03 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImageCollection03 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImageCollection04">
            <summary>
            Creates a tile content object for the TileWidePeekImageCollection04 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImageCollection04 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImageCollection05">
            <summary>
            Creates a tile content object for the TileWidePeekImageCollection05 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImageCollection05 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWidePeekImageCollection06">
            <summary>
            Creates a tile content object for the TileWidePeekImageCollection06 template.
            </summary>
            <returns>A tile content object for the TileWidePeekImageCollection06 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWideSmallImageAndText01">
            <summary>
            Creates a tile content object for the TileWideSmallImageAndText01 template.
            </summary>
            <returns>A tile content object for the TileWideSmallImageAndText01 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWideSmallImageAndText02">
            <summary>
            Creates a tile content object for the TileWideSmallImageAndText02 template.
            </summary>
            <returns>A tile content object for the TileWideSmallImageAndText02 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWideSmallImageAndText03">
            <summary>
            Creates a tile content object for the TileWideSmallImageAndText03 template.
            </summary>
            <returns>A tile content object for the TileWideSmallImageAndText03 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWideSmallImageAndText04">
            <summary>
            Creates a tile content object for the TileWideSmallImageAndText04 template.
            </summary>
            <returns>A tile content object for the TileWideSmallImageAndText04 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWideSmallImageAndText05">
            <summary>
            Creates a tile content object for the TileWideSmallImageAndText05 template.
            </summary>
            <returns>A tile content object for the TileWideSmallImageAndText05 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWideText01">
            <summary>
            Creates a tile content object for the TileWideText01 template.
            </summary>
            <returns>A tile content object for the TileWideText01 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWideText02">
            <summary>
            Creates a tile content object for the TileWideText02 template.
            </summary>
            <returns>A tile content object for the TileWideText02 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWideText03">
            <summary>
            Creates a tile content object for the TileWideText03 template.
            </summary>
            <returns>A tile content object for the TileWideText03 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWideText04">
            <summary>
            Creates a tile content object for the TileWideText04 template.
            </summary>
            <returns>A tile content object for the TileWideText04 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWideText05">
            <summary>
            Creates a tile content object for the TileWideText05 template.
            </summary>
            <returns>A tile content object for the TileWideText05 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWideText06">
            <summary>
            Creates a tile content object for the TileWideText06 template.
            </summary>
            <returns>A tile content object for the TileWideText06 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWideText07">
            <summary>
            Creates a tile content object for the TileWideText07 template.
            </summary>
            <returns>A tile content object for the TileWideText07 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWideText08">
            <summary>
            Creates a tile content object for the TileWideText08 template.
            </summary>
            <returns>A tile content object for the TileWideText08 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWideText09">
            <summary>
            Creates a tile content object for the TileWideText09 template.
            </summary>
            <returns>A tile content object for the TileWideText09 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWideText10">
            <summary>
            Creates a tile content object for the TileWideText10 template.
            </summary>
            <returns>A tile content object for the TileWideText10 template.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.TileContent.TileContentFactory.CreateTileWideText11">
            <summary>
            Creates a tile content object for the TileWideText11 template.
            </summary>
            <returns>A tile content object for the TileWideText11 template.</returns>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.ToastContent.IToastAudio">
            <summary>
            Type representing the toast notification audio properties which is contained within
            a toast notification content object.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastAudio.Content">
            <summary>
            The audio content that should be played when the toast is shown.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastAudio.Loop">
            <summary>
            Whether the audio should loop.  If this property is set to true, the toast audio content
            must be a looping sound.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.ToastContent.IToastNotificationContent">
            <summary>
            Base toast notification content interface.
            </summary>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.ToastContent.IToastNotificationContent.CreateNotification">
            <summary>
            Creates a WinRT ToastNotification object based on the content.
            </summary>
            <returns>A WinRT ToastNotification object based on the content.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.ToastContent.IToastNotificationContent.FromPackage(System.String)">
            <summary>
            Generates a package URI
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastNotificationContent.StrictValidation">
            <summary>
            Whether strict validation should be applied when the Xml or notification object is created,
            and when some of the properties are assigned.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastNotificationContent.Lang">
            <summary>
            The language of the content being displayed.  The language should be specified using the
            abbreviated language code as defined by BCP 47.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastNotificationContent.BaseUri">
            <summary>
            The BaseUri that should be used for image locations.  Relative image locations use this
            field as their base Uri.  The BaseUri must begin with http://, https://, ms-appx:///, or 
            ms-appdata:///local/.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastNotificationContent.AddImageQuery">
            <summary>
            Controls if query strings that denote the client configuration of contrast, scale, and language setting should be appended to the Src
            If true, Windows will append query strings onto images that exist in this template
            If false (the default, Windows will not append query strings onto images that exist in this template            
            Query string details:
            Parameter: ms-contrast
                Values: standard, black, white
            Parameter: ms-scale
                Values: 80, 100, 140, 180
            Parameter: ms-lang
                Values: The BCP 47 language tag set in the notification xml, or if omitted, the current preferred language of the user
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastNotificationContent.Launch">
            <summary>
            The launch parameter passed into the Windows Store app when the toast is activated.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastNotificationContent.Audio">
            <summary>
            The audio that should be played when the toast is displayed.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastNotificationContent.Duration">
            <summary>
            The length that the toast should be displayed on screen.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.ToastContent.IToastImageAndText01">
            <summary>
            A toast template that displays an image and a text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastImageAndText01.Image">
            <summary>
            The main image on the toast.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastImageAndText01.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.ToastContent.IToastImageAndText02">
            <summary>
            A toast template that displays an image and two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastImageAndText02.Image">
            <summary>
            The main image on the toast.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastImageAndText02.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastImageAndText02.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.ToastContent.IToastImageAndText03">
            <summary>
            A toast template that displays an image and two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastImageAndText03.Image">
            <summary>
            The main image on the toast.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastImageAndText03.TextHeadingWrap">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastImageAndText03.TextBody">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.ToastContent.IToastImageAndText04">
            <summary>
            A toast template that displays an image and three text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastImageAndText04.Image">
            <summary>
            The main image on the toast.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastImageAndText04.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastImageAndText04.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastImageAndText04.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.ToastContent.IToastText01">
            <summary>
            A toast template that displays a text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastText01.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.ToastContent.IToastText02">
            <summary>
            A toast template that displays two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastText02.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastText02.TextBodyWrap">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.ToastContent.IToastText03">
            <summary>
            A toast template that displays two text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastText03.TextHeadingWrap">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastText03.TextBody">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.ToastContent.IToastText04">
            <summary>
            A toast template that displays three text fields.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastText04.TextHeading">
            <summary>
            A heading text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastText04.TextBody1">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.Notifications.ToastContent.IToastText04.TextBody2">
            <summary>
            A body text field.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.ToastContent.ToastAudioContent">
            <summary>
            The audio options that can be played while the toast is on screen.
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.ToastContent.ToastAudioContent.Default">
            <summary>
            The default toast audio sound.
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.ToastContent.ToastAudioContent.Mail">
            <summary>
            Audio that corresponds to new mail arriving.
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.ToastContent.ToastAudioContent.SMS">
            <summary>
            Audio that corresponds to a new SMS message arriving.
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.ToastContent.ToastAudioContent.IM">
            <summary>
            Audio that corresponds to a new IM arriving.
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.ToastContent.ToastAudioContent.Reminder">
            <summary>
            Audio that corresponds to a reminder.
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.ToastContent.ToastAudioContent.LoopingCall">
            <summary>
            The default looping sound.  Audio that corresponds to a call.
            Only valid for toasts that are have the duration set to "Long".
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.ToastContent.ToastAudioContent.LoopingCall2">
            <summary>
            Audio that corresponds to a call.
            Only valid for toasts that are have the duration set to "Long".
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.ToastContent.ToastAudioContent.LoopingAlarm">
            <summary>
            Audio that corresponds to an alarm.
            Only valid for toasts that are have the duration set to "Long".
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.ToastContent.ToastAudioContent.LoopingAlarm2">
            <summary>
            Audio that corresponds to an alarm.
            Only valid for toasts that are have the duration set to "Long".
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.ToastContent.ToastAudioContent.Silent">
            <summary>
            No audio should be played when the toast is displayed.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.ToastContent.ToastContentFactory">
            <summary>
            A factory which creates toast content objects for all of the toast template types.
            </summary>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.ToastContent.ToastContentFactory.CreateToastImageAndText01">
            <summary>
            Creates a ToastImageAndText01 template content object.
            </summary>
            <returns>A ToastImageAndText01 template content object.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.ToastContent.ToastContentFactory.CreateToastImageAndText02">
            <summary>
            Creates a ToastImageAndText02 template content object.
            </summary>
            <returns>A ToastImageAndText02 template content object.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.ToastContent.ToastContentFactory.CreateToastImageAndText03">
            <summary>
            Creates a ToastImageAndText03 template content object.
            </summary>
            <returns>A ToastImageAndText03 template content object.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.ToastContent.ToastContentFactory.CreateToastImageAndText04">
            <summary>
            Creates a ToastImageAndText04 template content object.
            </summary>
            <returns>A ToastImageAndText04 template content object.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.ToastContent.ToastContentFactory.CreateToastText01">
            <summary>
            Creates a ToastText01 template content object.
            </summary>
            <returns>A ToastText01 template content object.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.ToastContent.ToastContentFactory.CreateToastText02">
            <summary>
            Creates a ToastText02 template content object.
            </summary>
            <returns>A ToastText02 template content object.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.ToastContent.ToastContentFactory.CreateToastText03">
            <summary>
            Creates a ToastText03 template content object.
            </summary>
            <returns>A ToastText03 template content object.</returns>
        </member>
        <member name="M:JulMar.Windows.UI.Notifications.ToastContent.ToastContentFactory.CreateToastText04">
            <summary>
            Creates a ToastText04 template content object.
            </summary>
            <returns>A ToastText04 template content object.</returns>
        </member>
        <member name="T:JulMar.Windows.UI.Notifications.ToastContent.ToastDuration">
            <summary>
            The duration the toast should be displayed on screen.
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.ToastContent.ToastDuration.Short">
            <summary>
            Default behavior.  The toast will be on screen for a short amount of time.
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.Notifications.ToastContent.ToastDuration.Long">
            <summary>
            The toast will be on screen for a longer amount of time.
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.UICommand">
            <summary>
            A UI command to execute
            </summary>
        </member>
        <member name="M:JulMar.Windows.UI.UICommand.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JulMar.Windows.UI.UICommand.#ctor(System.Object,System.String,Windows.UI.Popups.UICommandInvokedHandler)">
            <summary>
            Constructor
            </summary>
            <param name="id"></param>
            <param name="label"></param>
            <param name="action"></param>
        </member>
        <member name="F:JulMar.Windows.UI.UICommand.OkCommand">
            <summary>
            OK command
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.UICommand.CancelCommand">
            <summary>
            Cancel command
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.UICommand.YesCommand">
            <summary>
            Yes command
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.UICommand.NoCommand">
            <summary>
            No command
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.UICommand.AllowCommand">
            <summary>
            Allow command
            </summary>
        </member>
        <member name="F:JulMar.Windows.UI.UICommand.BlockCommand">
            <summary>
            Block command
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.UICommand.Id">
            <summary>
            Id representing this command
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.UICommand.Invoked">
            <summary>
            The handler
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.UICommand.Label">
            <summary>
            The text to display
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.UICommand.Ok">
            <summary>
            OK command
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.UICommand.Cancel">
            <summary>
            Cancel command
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.UICommand.OkCancel">
            <summary>
            Method to generate OK/Cancel buttons
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.UICommand.Yes">
            <summary>
            Yes command
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.UICommand.No">
            <summary>
            No command
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.UICommand.YesNo">
            <summary>
            Method to generate Yes/No buttons
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.UICommand.YesNoCancel">
            <summary>
            Method to generate Yes/No/Cancel buttons
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.UICommand.Allow">
            <summary>
            Allow command
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.UICommand.Block">
            <summary>
            Block command
            </summary>
        </member>
        <member name="P:JulMar.Windows.UI.UICommand.AllowBlock">
            <summary>
            Method to generate Allow/Block buttons
            </summary>
        </member>
        <member name="T:JulMar.Windows.Mvvm.ViewModel">
            <summary>
            This class is used as the basis for all ViewModel objects
            </summary>
        </member>
        <member name="M:JulMar.Windows.Mvvm.ViewModel.#ctor">
            <summary>
            Constructor - registers with the message mediator and hooks up any imports/exports
            with the default MEF catalog
            </summary>
        </member>
        <member name="M:JulMar.Windows.Mvvm.ViewModel.Initialize(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Setup the view model
            </summary>
        </member>
        <member name="M:JulMar.Windows.Mvvm.ViewModel.Resolve``1">
            <summary>
            This resolves a service type and returns the implementation.
            </summary>
            <typeparam name="T">Type to resolve</typeparam>
            <returns>Implementation</returns>
        </member>
        <member name="M:JulMar.Windows.Mvvm.ViewModel.SendMessage``1(System.String,``0)">
            <summary>
            This sends a message via the MessageMediator.
            </summary>
            <param name="key">Message key</param>
            <param name="message">Message parameter</param>
            <returns>True if at least one recipient received the message</returns>
        </member>
        <member name="M:JulMar.Windows.Mvvm.ViewModel.SendMessage``1(``0)">
            <summary>
            This sends a message via the MessageMediator.
            </summary>
            <param name="message">Message parameter</param>
            <returns>True if at least one recipient received the message</returns>
        </member>
        <member name="M:JulMar.Windows.Mvvm.ViewModel.Dispose(System.Boolean)">
            <summary>
            This disposes of the view model.  It unregisters from the message mediator.
            </summary>
            <param name="isDisposing">True if IDisposable.Dispose was called</param>
        </member>
        <member name="M:JulMar.Windows.Mvvm.ViewModel.Dispose">
            <summary>
            Implementation of IDisposable.Dispose.
            </summary>
        </member>
        <member name="T:JulMar.Core.PropertyObserver`1">
            <summary>
            Monitors the PropertyChanged event of an object that implements INotifyPropertyChanged,
            and executes callback methods (i.e. handlers) registered for properties of that object.
            </summary>
            <typeparam name="T">The type of object to monitor for property changes.</typeparam>
        </member>
        <member name="M:JulMar.Core.PropertyObserver`1.#ctor(`0)">
            <summary>
            Initializes a new instance of PropertyObserver, which
            observes the 'propertySource' object for property changes.
            </summary>
            <param name="propertySource">The object to monitor for property changes.</param>
        </member>
        <member name="M:JulMar.Core.PropertyObserver`1.RegisterHandler(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{`0})">
            <summary>
            Registers a callback to be invoked when the PropertyChanged event has been raised for the specified property.
            </summary>
            <param name="expression">A lambda expression like 'n => n.PropertyName'.</param>
            <param name="handler">The callback to invoke when the property has changed.</param>
            <returns>The object on which this method was invoked, to allow for multiple invocations chained together.</returns>
        </member>
        <member name="M:JulMar.Core.PropertyObserver`1.UnregisterHandler(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Removes the callback associated with the specified property.
            </summary>
            <param name="expression">A lambda expression like 'n => n.PropertyName'.</param>
            <returns>The object on which this method was invoked, to allow for multiple invocations chained together.</returns>
        </member>
        <member name="M:JulMar.Core.PropertyObserver`1.GetPropertyName(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Retrieves the property name for a given expression.
            </summary>
            <param name="expression">Expression to evaluate</param>
            <returns>Property name</returns>
        </member>
        <member name="M:JulMar.Core.PropertyObserver`1.GetSource">
            <summary>
            Returns the source object we are monitoring.
            </summary>
            <returns>Object if it is still alive.</returns>
        </member>
        <member name="M:JulMar.Core.PropertyObserver`1.OnUnsubscribe(`0)">
            <summary>
            This method unsubscribes from the source object INotifyPropertyChanged event.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:JulMar.Core.PropertyObserver`1.OnSubscribe(`0)">
            <summary>
            This method subscribes to the source object's INotifyPropertyChanged event.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:JulMar.Core.PropertyObserver`1.OnReceiveEvent(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Receives events from the centralized event manager.
            </summary>
        </member>
        <member name="M:JulMar.Core.PropertyObserver`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="E:JulMar.Core.PropertyObserver`1.PropertyChanged">
            <summary>
            This event list gets invoked for *every* property change on the object.
            </summary>
        </member>
        <member name="T:JulMar.Core.Services.DynamicComposer">
            <summary>
            Inversion of Control Composer - currently based on MEF (4.0).
            </summary>
        </member>
        <member name="M:JulMar.Core.Services.DynamicComposer.#ctor">
            <summary>
            Internal constructor - stop this class from being created directly.
            </summary>
        </member>
        <member name="M:JulMar.Core.Services.DynamicComposer.Compose(System.Object)">
            <summary>
            Used to resolve a set of targets.
            </summary>
        </member>
        <member name="M:JulMar.Core.Services.DynamicComposer.GetExportedValue``1">
            <summary>
            Retrieves the specified exported object by type, throws an exception if it cannot be found/created.
            </summary>
            <typeparam name="T">Type</typeparam>
            <exception cref="T:System.Composition.Hosting.CompositionFailedException"/>
            <returns>Created object</returns>
        </member>
        <member name="M:JulMar.Core.Services.DynamicComposer.TryGetExportedValue``1(``0@)">
            <summary>
            Retrieves the specified exported object by type, or NULL if it doesn't exist.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="value">Returning object, null if not found/created</param>
            <returns>True/False result</returns>
        </member>
        <member name="M:JulMar.Core.Services.DynamicComposer.GetExportedValue``1(System.String)">
            <summary>
            Retrieves the specified exported object by type and contract name.  
            Throws an exception if it cannot be found/created.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="contractName">Contract name</param>
            <exception cref="T:System.Composition.Hosting.CompositionFailedException"/>
            <returns>Created object</returns>
        </member>
        <member name="M:JulMar.Core.Services.DynamicComposer.TryGetExportedValue``1(System.String,``0@)">
            <summary>
            Retrieves the specified exported object by type and contract.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="contractName">Contract name</param>
            <param name="value">Returning object, null if not found/created</param>
            <returns>True/False result</returns>
        </member>
        <member name="M:JulMar.Core.Services.DynamicComposer.GetExportedValues``1">
            <summary>
            Retrieves the specified exported objects by type.
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns>Created objects</returns>
        </member>
        <member name="M:JulMar.Core.Services.DynamicComposer.GetExportedValues``1(System.String)">
            <summary>
            Retrieves the specified exported objects by type.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="contractName">Contract name</param>
            <returns>Created objects</returns>
        </member>
        <member name="M:JulMar.Core.Services.DynamicComposer.GetExportedValue(System.Type)">
            <summary>
            Retrieves the specified export by type.
            Throws an exception if it does not exist/cannot be created
            </summary>
            <param name="type">Type</param>
            <exception cref="T:System.Composition.Hosting.CompositionFailedException"/>
            <returns>Created object</returns>
        </member>
        <member name="M:JulMar.Core.Services.DynamicComposer.TryGetExportedValue(System.Type,System.Object@)">
            <summary>
            Retrieves the specified export by type.
            </summary>
            <param name="type">Type</param>
            <param name="value">Returning value, null if not created/found.</param>
            <returns>True/False result</returns>
        </member>
        <member name="M:JulMar.Core.Services.DynamicComposer.GetExportedValue(System.Type,System.String)">
            <summary>
            Retrieves the specified export by type/contract name.
            </summary>
            <param name="type">Type</param>
            <param name="contractName">Contract name</param>
            <exception cref="T:System.Composition.Hosting.CompositionFailedException"/>
            <returns>Created object</returns>
        </member>
        <member name="M:JulMar.Core.Services.DynamicComposer.TryGetExportedValue(System.Type,System.String,System.Object@)">
            <summary>
            Retrieves the specified export by type.
            </summary>
            <param name="type">Type</param>
            <param name="contractName">Contract name</param>
            <param name="value">Created object or null</param>
            <exception cref="T:System.Composition.Hosting.CompositionFailedException"/>
            <returns>True/False result</returns>
        </member>
        <member name="M:JulMar.Core.Services.DynamicComposer.GetExportedValues(System.Type)">
            <summary>
            Retrieves the specified exports by type.
            </summary>
            <param name="type">Type</param>
        </member>
        <member name="M:JulMar.Core.Services.DynamicComposer.GetExportedValues(System.Type,System.String)">
            <summary>
            Retrieves the specified exports by type.
            </summary>
            <param name="type">Type</param>
            <param name="contractName"> </param>
        </member>
        <member name="M:JulMar.Core.Services.DynamicComposer.GetPackageAssemblyListAsync">
            <summary>
            This method retrieves all the assemblies in the current app package
            </summary>
            <returns></returns>
        </member>
        <member name="M:JulMar.Core.Services.DynamicComposer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:JulMar.Core.Services.DynamicComposer.Instance">
            <summary>
            IoC instance
            </summary>
        </member>
        <member name="E:JulMar.Core.Services.DynamicComposer.PreCreateContainer">
            <summary>
            This is called before any assemblies are added to the container.
            </summary>
        </member>
        <member name="E:JulMar.Core.Services.DynamicComposer.CreatingContainer">
            <summary>
            This is called after all setup is performed and the container is about to be created.
            </summary>
        </member>
        <member name="P:JulMar.Core.Services.DynamicComposer.Host">
            <summary>
            The container being used
            </summary>
        </member>
        <member name="T:JulMar.Core.Services.MessageMediator">
            <summary>
            This class creates a simple Mediator which loosely connects different objects together. 
            The message handlers are organized using string-based message keys and are held in a WeakReference
            collection.
            </summary>
        </member>
        <member name="M:JulMar.Core.Services.MessageMediator.Register(System.Object)">
            <summary>
            This registers a Type with the mediator.  Any methods decorated with <seealso cref="T:JulMar.Core.MessageMediatorTargetAttribute"/> will be 
            registered as target method handlers for the given message key.
            </summary>
            <param name="view">Object to register</param>
        </member>
        <member name="M:JulMar.Core.Services.MessageMediator.Unregister(System.Object)">
            <summary>
            This method unregisters a type from the message mediator.
            </summary>
            <param name="view">Object to unregister</param>
        </member>
        <member name="M:JulMar.Core.Services.MessageMediator.RegisterHandler(System.String,System.Action)">
            <summary>
            Registers a specific method with no parameters as a handler
            </summary>
            <param name="key">Message key</param>
            <param name="handler">Handler method</param>
        </member>
        <member name="M:JulMar.Core.Services.MessageMediator.RegisterHandler``1(System.String,System.Action{``0})">
            <summary>
            This registers a specific method as a message handler for a specific type.
            </summary>
            <param name="key">Message key</param>
            <param name="handler">Handler method</param>
        </member>
        <member name="M:JulMar.Core.Services.MessageMediator.RegisterHandler``1(System.Action{``0})">
            <summary>
            This registers a specific method as a message handler for a specific type.
            </summary>
            <param name="handler">Handler method</param>
        </member>
        <member name="M:JulMar.Core.Services.MessageMediator.UnregisterHandler(System.String,System.Action)">
            <summary>
            Unregisters simple handler
            </summary>
            <param name="key">Message key</param>
            <param name="handler">Handler method</param>
        </member>
        <member name="M:JulMar.Core.Services.MessageMediator.UnregisterHandler``1(System.String,System.Action{``0})">
            <summary>
            This unregisters a method as a handler.
            </summary>
            <param name="key">Message key</param>
            <param name="handler">Handler</param>
        </member>
        <member name="M:JulMar.Core.Services.MessageMediator.UnregisterHandler``1(System.Action{``0})">
            <summary>
            This unregisters a method as a handler for a specific type
            </summary>
            <param name="handler">Handler</param>
        </member>
        <member name="M:JulMar.Core.Services.MessageMediator.InternalRegisterHandler(System.Object,System.Delegate)">
            <summary>
            Performs the actual registration of a target
            </summary>
            <param name="key">Key to store in dictionary</param>
            <param name="handler">Method</param>
        </member>
        <member name="M:JulMar.Core.Services.MessageMediator.InternalUnregisterHandler(System.Object,System.Delegate)">
            <summary>
            Performs the unregistration from a target
            </summary>
            <param name="key">Key to store in dictionary</param>
            <param name="handler">Method</param>
        </member>
        <member name="M:JulMar.Core.Services.MessageMediator.SendMessage(System.Object,System.Object)">
            <summary>
            This method broadcasts a message to all message targets for a given
            message key and passes a parameter.
            </summary>
            <param name="key">Message key</param>
            <param name="message">Message parameter</param>
            <returns>True/False if any handlers were invoked.</returns>
        </member>
        <member name="M:JulMar.Core.Services.MessageMediator.SendSimpleMessage(System.String)">
            <summary>
            This method broadcasts a message with no parameters
            </summary>
            <param name="key">Message key</param>
            <returns>True/False if any handlers were invoked.</returns>
        </member>
        <member name="M:JulMar.Core.Services.MessageMediator.SendMessage``1(System.String,``0)">
            <summary>
            This method broadcasts a message to all message targets for a given
            message key and passes a parameter.
            </summary>
            <param name="key">Message key</param>
            <param name="message">Message parameter</param>
            <returns>True/False if any handlers were invoked.</returns>
        </member>
        <member name="M:JulMar.Core.Services.MessageMediator.SendMessage``1(``0)">
            <summary>
            This method broadcasts a message to all message targets for a given parameter type.
            If a derived type is passed, any handlers for interfaces or base types will also be
            invoked.
            </summary>
            <param name="message">Message parameter</param>
            <returns>True/False if any handlers were invoked.</returns>
        </member>
        <member name="M:JulMar.Core.Services.MessageMediator.SendMessageAsync``1(System.String,``0)">
            <summary>
            This method broadcasts a message to all message targets for a given
            message key and passes a parameter.  The message targets are all called
            asynchronously and any resulting exceptions are ignored.
            </summary>
            <param name="key">Message key</param>
            <param name="message">Message parameter</param>
        </member>
        <member name="M:JulMar.Core.Services.MessageMediator.SendMessageAsync``1(``0)">
            <summary>
            This method broadcasts a message to all message targets for a given parameter type.
            If a derived type is passed, any handlers for interfaces or base types will also be
            invoked.  The message targets are all called asynchronously and any resulting exceptions
            are ignored.
            </summary>
            <param name="message">Message parameter</param>
        </member>
        <member name="T:JulMar.Core.Services.MessageMediator.WeakAction">
            <summary>
            This class creates a weak delegate of form Action(Of Object)
            </summary>
        </member>
        <member name="T:JulMar.Core.Services.ServiceLocator">
            <summary>
            This class acts as a resolver for typed services (interfaces and implementations).
            Internally it relies on an IServiceContainer - it will create a BCL version if one is not 
            supplied.  Any custom implementation can also be used - this provider will not use the 
            promotion features so those do not need to be implemented.
            </summary>
            <example>
            To register a service use Add:
            <![CDATA[
            serviceResolver.Add(typeof(IService), new Service());
            
            To retrieve a service use Resolve:
            
            IService svc = serviceResolver<IService>.Resolve();
            ]]>
            </example>
        </member>
        <member name="P:JulMar.Core.Services.ServiceLocator.Instance">
            <summary>
            Service locator
            </summary>
        </member>
        <member name="T:JulMar.Core.Services.Internal.ServiceProvider">
            <summary>
            Internal implementation of the service provider; public so MEF can create/expose it.
            </summary>
        </member>
        <member name="F:JulMar.Core.Services.Internal.ServiceProvider._lock">
            <summary>
            Lock
            </summary>
        </member>
        <member name="F:JulMar.Core.Services.Internal.ServiceProvider._serviceContainer">
            <summary>
            Service container
            </summary>
        </member>
        <member name="M:JulMar.Core.Services.Internal.ServiceProvider.Exists(System.Type)">
            <summary>
            Returns whether the service exists.
            </summary>
            <param name="type">Type</param>
            <returns>True/False</returns>
        </member>
        <member name="M:JulMar.Core.Services.Internal.ServiceProvider.Add(System.Type,System.Object)">
            <summary>
            Adds a new service to the resolver list
            </summary>
            <param name="type">Service Type (typically an interface)</param>
            <param name="value">Object that implements service</param>
        </member>
        <member name="M:JulMar.Core.Services.Internal.ServiceProvider.Add``1(``0)">
            <summary>
            This adds a new service to the resolver list.
            </summary>
            <typeparam name="T">Type of the service</typeparam>
            <param name="value">Value</param>
        </member>
        <member name="M:JulMar.Core.Services.Internal.ServiceProvider.Remove(System.Type)">
            <summary>
            Remove a service
            </summary>
            <param name="type">Type to remove</param>
        </member>
        <member name="M:JulMar.Core.Services.Internal.ServiceProvider.Resolve``1">
            <summary>
            This resolves a service type and returns the implementation. Note that this
            assumes the key used to register the object is of the appropriate type or
            this method will throw an InvalidCastException!
            </summary>
            <typeparam name="T">Type to resolve</typeparam>
            <returns>Implementation</returns>
        </member>
        <member name="M:JulMar.Core.Services.Internal.ServiceProvider.GetService(System.Type)">
            <summary>
            Implementation of IServiceProvider
            </summary>
            <param name="serviceType">Service Type</param>
            <returns>Object implementing service</returns>
        </member>
        <member name="M:JulMar.Core.Services.Internal.ServiceProvider.CheckLocatedServices(System.Type,System.Object@)">
            <summary>
            This locates a lazy service record for a give type.
            </summary>
            <param name="type">Type to search for</param>
            <param name="value">Returning object</param>
            <returns>Lazy object or null</returns>
        </member>
        <member name="M:JulMar.Core.Services.Internal.ServiceProvider.DynamicLoadAndAdd(System.Type)">
            <summary>
            This searches the located MEF components and creates it and loads it into the service container.
            </summary>
            <param name="serviceType">Type we are looking for</param>
            <returns>Created object</returns>
        </member>
        <member name="P:JulMar.Core.Services.Internal.ServiceProvider.RegisteredServices">
            <summary>
            This returns all the registered services
            </summary>
        </member>
        <member name="T:JulMar.Windows.UI.Internal.MessageVisualizer">
            <summary>
            This class implements the IMessageVisualizer for Metro
            </summary>
        </member>
        <member name="M:JulMar.Windows.UI.Internal.MessageVisualizer.ShowAsync(System.String,System.String)">
            <summary>
            ShowAsync is used for simple notifications with an OK button.
            </summary>
            <param name="message">The content to display in the notification.</param>
            <param name="title">The optional title to be shown</param>
        </member>
        <member name="M:JulMar.Windows.UI.Internal.MessageVisualizer.ShowAsync(System.String,System.String,JulMar.Windows.UI.MessageVisualizerOptions)">
            <summary>
            Display a notification to the user with options.
            </summary>
            <param name="message"></param>
            <param name="title"></param>
            <param name="visualizerOptions"></param>
            <returns></returns>
        </member>
    </members>
</doc>
